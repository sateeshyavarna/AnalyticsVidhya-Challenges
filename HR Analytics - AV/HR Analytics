{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EGydAx2ZHyKj"
   },
   "outputs": [],
   "source": [
    "def missing_values_table(df):\n",
    "\tmis_val = df.isnull().sum()\n",
    "\tmis_val_percent = 100 * df.isnull().sum() / len(df)\n",
    "\tmis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n",
    "\tmis_val_table_ren_columns = mis_val_table.rename(columns={0: 'Missing Values', 1: '% of Total Values'})\n",
    "\tmis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:, 1] != 0].sort_values('% of Total Values', ascending=False).round(2)\n",
    "\tprint(\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n There are \" + str(mis_val_table_ren_columns.shape[0]) + \" columns that have missing values.\")\n",
    "\treturn mis_val_table_ren_columns\n",
    "\n",
    "def removeConstantVariables(data,colsToExclude):\n",
    "    colsRemoved = list()\n",
    "    for col in data:\n",
    "      if col not in colsToExclude and data[col].nunique() == 1:\n",
    "        colsRemoved.append(col)\n",
    "    return colsRemoved\n",
    "  \n",
    "def correlation(dataset, threshold):\n",
    "    col_corr = {} # Set of all the names of deleted columns\n",
    "    corr_matrix = dataset.corr()\n",
    "    for i in range(len(corr_matrix.columns)):\n",
    "        for j in range(i):\n",
    "            if corr_matrix.iloc[i, j] > threshold:\n",
    "                colname = corr_matrix.columns[i] # getting the name of column\n",
    "                col_corr[colname] = corr_matrix.iloc[i, j]\n",
    "                if colname in dataset.columns:\n",
    "                  pass\n",
    "#                    del dataset[colname] # deleting the column from the dataset\n",
    "    for key, val in col_corr.items():\n",
    "        print(key, \"=>\", val)\n",
    "      \n",
    "def binning(col, cut_points, labels=None):\n",
    "  #Define min and max values:\n",
    "  minval = col.min()\n",
    "  maxval = col.max()\n",
    "\n",
    "  #create list by adding min and max to cut_points\n",
    "  break_points = [minval] + cut_points + [maxval]\n",
    "\n",
    "#   print(break_points)\n",
    "  #if no labels provided, use default labels 0 ... (n-1)\n",
    "  if not labels:\n",
    "    labels = range(len(cut_points)+1)\n",
    "\n",
    "  #Binning using cut function of pandas\n",
    "  colBin = pd.cut(col,bins=break_points,labels=labels,include_lowest=True)\n",
    "  return colBin\n",
    "\n",
    "def plotConfusionMatrix(cm):\n",
    "  plt.clf()\n",
    "  plt.imshow(cm,cmap=plt.cm.prism)\n",
    "  classNames = ['0','1']\n",
    "  plt.title('Confusion Matrix')\n",
    "  plt.grid(False)\n",
    "  plt.ylabel('Actual')\n",
    "  plt.xlabel('Predicted')\n",
    "  tick_marks = np.arange(len(classNames))\n",
    "  plt.xticks(tick_marks, classNames)\n",
    "  plt.yticks(tick_marks, classNames)\n",
    "  \n",
    "  s = [['TN','FP'], ['FN', 'TP']]\n",
    "  for i in range(2):\n",
    "     for j in range(2):\n",
    "          plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]),ha='center',va='center')\n",
    "  plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 3050,
     "status": "ok",
     "timestamp": 1552319294874,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "llwuCbiM86sX",
    "outputId": "4fea7ce3-2aad-4375-bb74-2a2c88e24e7e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imported All Imports\n"
     ]
    }
   ],
   "source": [
    "# Imports\n",
    "\n",
    "import  pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import cohen_kappa_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import precision_score,recall_score\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "import xgboost as xgbm\n",
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import GridSearchCV, train_test_split,cross_val_score\n",
    "from sklearn.metrics import confusion_matrix, f1_score, precision_recall_curve\n",
    "import seaborn as sns\n",
    "print(\"Imported All Imports\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZwtXov2ZJx3B"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1hJxtQ2UgSC0"
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 101920,
     "status": "ok",
     "timestamp": 1552319393793,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "fflbqajlA18_",
    "outputId": "d5cb755b-d759-4278-fca4-db59ad1e8796"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting previously unselected package google-drive-ocamlfuse.\n",
      "(Reading database ... \r",
      "(Reading database ... 5%\r",
      "(Reading database ... 10%\r",
      "(Reading database ... 15%\r",
      "(Reading database ... 20%\r",
      "(Reading database ... 25%\r",
      "(Reading database ... 30%\r",
      "(Reading database ... 35%\r",
      "(Reading database ... 40%\r",
      "(Reading database ... 45%\r",
      "(Reading database ... 50%\r",
      "(Reading database ... 55%\r",
      "(Reading database ... 60%\r",
      "(Reading database ... 65%\r",
      "(Reading database ... 70%\r",
      "(Reading database ... 75%\r",
      "(Reading database ... 80%\r",
      "(Reading database ... 85%\r",
      "(Reading database ... 90%\r",
      "(Reading database ... 95%\r",
      "(Reading database ... 100%\r",
      "(Reading database ... 131322 files and directories currently installed.)\n",
      "Preparing to unpack .../google-drive-ocamlfuse_0.7.1-0ubuntu3~ubuntu18.04.1_amd64.deb ...\n",
      "Unpacking google-drive-ocamlfuse (0.7.1-0ubuntu3~ubuntu18.04.1) ...\n",
      "Setting up google-drive-ocamlfuse (0.7.1-0ubuntu3~ubuntu18.04.1) ...\n",
      "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n",
      "Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n",
      "··········\n",
      "Please, open the following URL in a web browser: https://accounts.google.com/o/oauth2/auth?client_id=32555940559.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&response_type=code&access_type=offline&approval_prompt=force\n",
      "Please enter the verification code: Access token retrieved correctly.\n"
     ]
    }
   ],
   "source": [
    "#os.chdir(\"godrive/app/predictDamage\")\n",
    "\n",
    "#!ls -l /home/\n",
    "# !apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n",
    "!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n",
    "!apt-get update -qq 2>&1 > /dev/null\n",
    "!apt-get -y install -qq google-drive-ocamlfuse fuse\n",
    "\n",
    "from google.colab import auth\n",
    "auth.authenticate_user()\n",
    "\n",
    "from oauth2client.client import GoogleCredentials\n",
    "creds = GoogleCredentials.get_application_default()\n",
    "import getpass\n",
    "!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\n",
    "vcode = getpass.getpass()\n",
    "!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n",
    "\n",
    "!mkdir -p drive\n",
    "!google-drive-ocamlfuse drive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 187
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 103305,
     "status": "ok",
     "timestamp": 1552319395222,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "E_TpENKFA3su",
    "outputId": "3424dac1-c362-4d1f-daba-faf244f9af00"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sample.csv',\n",
       " 'test.csv',\n",
       " 'train.csv',\n",
       " 'xgb_1',\n",
       " 'xgb_2',\n",
       " 'lgb',\n",
       " 'xgb_1.csv',\n",
       " 'xgb_2.csv',\n",
       " 'lgb.csv',\n",
       " 'HR Analytics']"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  !ls -l drive/app/predictDamage\n",
    "# !cd drive/app/predictDamage\n",
    "# !pwd\n",
    "\n",
    "import os\n",
    "os.chdir(\"drive/Analytics Vidya/HR Analytics - AV\")\n",
    "os.listdir()\n",
    "# !cd drive/'LG- HackerEarth'/\n",
    "# !ls -lrth \n",
    "\n",
    "# !pwd\n",
    "# !cd drive/app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "LGMDreasA4MX"
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"train.csv\")\n",
    "test = pd.read_csv(\"test.csv\")\n",
    "sample = pd.read_csv(\"sample.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 292
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106233,
     "status": "ok",
     "timestamp": 1552319398182,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "iRN6ZyB8jZ0C",
    "outputId": "c5d8ed76-40a4-4819-9d95-3be01d476527"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>65438</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_7</td>\n",
       "      <td>Master's &amp; above</td>\n",
       "      <td>f</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65141</td>\n",
       "      <td>Operations</td>\n",
       "      <td>region_22</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7513</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_19</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>sourcing</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2542</td>\n",
       "      <td>Sales &amp; Marketing</td>\n",
       "      <td>region_23</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48945</td>\n",
       "      <td>Technology</td>\n",
       "      <td>region_26</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>m</td>\n",
       "      <td>other</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id         department     region         education gender  \\\n",
       "0        65438  Sales & Marketing   region_7  Master's & above      f   \n",
       "1        65141         Operations  region_22        Bachelor's      m   \n",
       "2         7513  Sales & Marketing  region_19        Bachelor's      m   \n",
       "3         2542  Sales & Marketing  region_23        Bachelor's      m   \n",
       "4        48945         Technology  region_26        Bachelor's      m   \n",
       "\n",
       "  recruitment_channel  no_of_trainings  age  previous_year_rating  \\\n",
       "0            sourcing                1   35                   5.0   \n",
       "1               other                1   30                   5.0   \n",
       "2            sourcing                1   34                   3.0   \n",
       "3               other                2   39                   1.0   \n",
       "4               other                1   45                   3.0   \n",
       "\n",
       "   length_of_service  KPIs_met >80%  awards_won?  avg_training_score  \\\n",
       "0                  8              1            0                  49   \n",
       "1                  4              0            0                  60   \n",
       "2                  7              0            0                  50   \n",
       "3                 10              0            0                  50   \n",
       "4                  2              0            0                  73   \n",
       "\n",
       "   is_promoted  \n",
       "0            0  \n",
       "1            0  \n",
       "2            0  \n",
       "3            0  \n",
       "4            0  "
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106211,
     "status": "ok",
     "timestamp": 1552319398183,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "6OdRdjuhE_gt",
    "outputId": "e14ed9b4-c6a4-4c5a-f3a4-747b38804a0f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54808, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 102
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106190,
     "status": "ok",
     "timestamp": 1552319398185,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "QPOPD8WLFAOg",
    "outputId": "93bfd204-869c-4409-fdce-13137dd2181b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['employee_id', 'department', 'region', 'education', 'gender',\n",
       "       'recruitment_channel', 'no_of_trainings', 'age', 'previous_year_rating',\n",
       "       'length_of_service', 'KPIs_met >80%', 'awards_won?',\n",
       "       'avg_training_score', 'is_promoted'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106152,
     "status": "ok",
     "timestamp": 1552319398186,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "ihlA8ZsTFAmB",
    "outputId": "42b1a86b-756b-4fd1-adaf-ff8fa100b009"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>50684.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "      <td>54808.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>39195.830627</td>\n",
       "      <td>1.253011</td>\n",
       "      <td>34.803915</td>\n",
       "      <td>3.329256</td>\n",
       "      <td>5.865512</td>\n",
       "      <td>0.351974</td>\n",
       "      <td>0.023172</td>\n",
       "      <td>63.386750</td>\n",
       "      <td>0.085170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22586.581449</td>\n",
       "      <td>0.609264</td>\n",
       "      <td>7.660169</td>\n",
       "      <td>1.259993</td>\n",
       "      <td>4.265094</td>\n",
       "      <td>0.477590</td>\n",
       "      <td>0.150450</td>\n",
       "      <td>13.371559</td>\n",
       "      <td>0.279137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19669.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>39225.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>58730.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>78298.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        employee_id  no_of_trainings           age  previous_year_rating  \\\n",
       "count  54808.000000     54808.000000  54808.000000          50684.000000   \n",
       "mean   39195.830627         1.253011     34.803915              3.329256   \n",
       "std    22586.581449         0.609264      7.660169              1.259993   \n",
       "min        1.000000         1.000000     20.000000              1.000000   \n",
       "25%    19669.750000         1.000000     29.000000              3.000000   \n",
       "50%    39225.500000         1.000000     33.000000              3.000000   \n",
       "75%    58730.500000         1.000000     39.000000              4.000000   \n",
       "max    78298.000000        10.000000     60.000000              5.000000   \n",
       "\n",
       "       length_of_service  KPIs_met >80%   awards_won?  avg_training_score  \\\n",
       "count       54808.000000   54808.000000  54808.000000        54808.000000   \n",
       "mean            5.865512       0.351974      0.023172           63.386750   \n",
       "std             4.265094       0.477590      0.150450           13.371559   \n",
       "min             1.000000       0.000000      0.000000           39.000000   \n",
       "25%             3.000000       0.000000      0.000000           51.000000   \n",
       "50%             5.000000       0.000000      0.000000           60.000000   \n",
       "75%             7.000000       1.000000      0.000000           76.000000   \n",
       "max            37.000000       1.000000      1.000000           99.000000   \n",
       "\n",
       "        is_promoted  \n",
       "count  54808.000000  \n",
       "mean       0.085170  \n",
       "std        0.279137  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 145
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106119,
     "status": "ok",
     "timestamp": 1552319398188,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "oX9C5esmFA4z",
    "outputId": "646b2703-565a-4a1c-de52-09416c78a69d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 14 columns.\n",
      " There are 2 columns that have missing values.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Values</th>\n",
       "      <th>% of Total Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>previous_year_rating</th>\n",
       "      <td>4124</td>\n",
       "      <td>7.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>education</th>\n",
       "      <td>2409</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Missing Values  % of Total Values\n",
       "previous_year_rating            4124               7.52\n",
       "education                       2409               4.40"
      ]
     },
     "execution_count": 13,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values_table(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 119
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106099,
     "status": "ok",
     "timestamp": 1552319398189,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "8ePQEufHFBIl",
    "outputId": "544d8ba5-a1e1-46e3-9e29-8235c3deeec3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0    18618\n",
       "5.0    11741\n",
       "4.0     9877\n",
       "1.0     6223\n",
       "2.0     4225\n",
       "Name: previous_year_rating, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['previous_year_rating'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106076,
     "status": "ok",
     "timestamp": 1552319398190,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "QV7V0_3H6YjO",
    "outputId": "e81c56d8-31e0-415f-efef-9c22d8bb2034"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Bachelor's          36669\n",
       "Master's & above    14925\n",
       "Below Secondary       805\n",
       "Name: education, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['education'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 272
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 106051,
     "status": "ok",
     "timestamp": 1552319398192,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "paUcUnERHQkb",
    "outputId": "46c6c358-5113-43c7-e638-453691c2fd5f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee_id               int64\n",
       "department               object\n",
       "region                   object\n",
       "education                object\n",
       "gender                   object\n",
       "recruitment_channel      object\n",
       "no_of_trainings           int64\n",
       "age                       int64\n",
       "previous_year_rating    float64\n",
       "length_of_service         int64\n",
       "KPIs_met >80%             int64\n",
       "awards_won?               int64\n",
       "avg_training_score        int64\n",
       "is_promoted               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 16,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1866
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 108083,
     "status": "ok",
     "timestamp": 1552319400253,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "P5uipn8vHRXK",
    "outputId": "73338350-9183-462b-a60a-6330dc2cb189"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nKuLQoUNkZmbSpk0bOnTowKpVqwBYu3Ytbdu2rbqOREREfJxX0+aXXXYZPXr04J577gFg/PjxREZG\nMnbsWJYuXUrDhg3p06cPgYGBJCYmMmTIEGw2G8OGDSMkJIRevXqxYcMG4uPjCQoKYvr06VXalIiI\niC/z+px3XFwccXFxFcbmzZt3ynY9e/akZ8+eFcZO3NstIiIintMKayIiIoZReIuIiBhG4S0iImIY\nhbeIiIhhFN4iIiKG8fpqcxEx06/fTfb8Mx5uf+UNEz3eh4hUno68RUREDKPwFhERMYzCW0RExDAK\nbxEREcMovEVERAyj8BYRETGMwltERMQwCm8RERHDKLxFREQMo/AWERExjMJbRETEMApvERERwyi8\nRUREDKPwFhERMYzCW0RExDAKbxEREcMovEVERAyj8BYRETGMwltERMQw5xXeR44coWvXrrz//vvs\n27ePgQMHMmDAAEaNGkVpaSkAK1asoG/fvvTr149ly5YB4HQ6SUxMJD4+noSEBHbv3n3+nYiIiFwg\nziu8X331VS655BIAXnrpJQYMGMCiRYto0qQJy5cvp6SkhDlz5jB//nySk5NZsGABhYWFpKSkEBoa\nyuLFixk6dCgzZ86skmZEREQuBF6H908//cSOHTu49dZbAcjIyKBLly4AdOrUifT0dLKysoiMjCQk\nJITg4GCio6PJzMwkPT2dbt26ARATE0NmZub5dyIiInKBCPD2gzNmzGDChAl8+OGHABw+fJigoCAA\nGjRogMPhID8/n/DwcPdnwsPDTxn38/PDZrNRWlrq/vzphIXVJSDA39tyKy0iIqTa91ETfKEPX+gB\nal8fv9bAPmpbz97yhT58oQfwjT6qsgevwvvDDz+kdevWNG7c+LTvu1yuKhk/WUFBSeUL9FJERAgO\nR3G176e6+UIfvtAD+E4fnvKVnn2hD1/oAXyjD296OFPgexXeX3zxBbt37+aLL77gt99+IygoiLp1\n63LkyBGCg4PJzc3Fbrdjt9vJz893fy4vL4/WrVtjt9txOBy0bNkSp9OJy+U661G3iIiI/B+vznm/\n+OKL/Otf/+K9996jX79+PPLII8TExJCamgpAWloasbGxREVFsXnzZoqKijh06BCZmZm0adOGDh06\nsGrVKgDWrl1L27Ztq64jERERH+f1Oe8/GjFiBGPHjmXp0qU0bNiQPn36EBgYSGJiIkOGDMFmszFs\n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\nWnj7+/sTFBTkPs8aFBRkcUWeO3LkCNu3b2fr1q3YbDb8/PwoLy8nLCzM6tI89vLLL7N161b8/Py4\n/vrrGTFihNUlVUpxcTFQ8RSf1S7Y8J44cSIFBQXUqVOHo0ePMmTIEA4fPsy+ffvOeFtGbda6dWvu\nuusuWrdujZ+fH9nZ2TRr1owPP/yQG264weryzqpv377YbDZcLhe7du1yL+tq4rQawMMPP0xRURGX\nXXZZhatqTQjvhx9+GIDo6OgKV5sDzJs3z4qSzkt0dDSPP/44ubm5vPHGG+7lUk0yduxYbrjhBh56\n6CFKS0v59ttveeKJJ3jxxRetLs0jTz75JPHx8YwbNw6n08nGjRt58sknefPNN60u7ZxOXIfj5+fn\nvovkhBPXGNW0C3ba3OVy8fHHH/PLL79w3XXX0aFDB9avX4+fnx9ZWVk89thjVpfose3bt/PTTz/h\ncrm48soruf766yktLa31Rxtnmk47wYRptZPFxcWxZMkSq8vwytdff8369etZtWoVt912m3u8rKyM\nlStX8tVXX1lYnXc2bdrEd999R1BQEK1atar1v8z+0eDBg0+5n/u+++5j/vz51hTkpYEDB5KcnFxh\n7HS91UZpaWmkpKSwadOmCr+EHzt2jK1bt7JmzZoar+mCPfKeNGkSTqeTVq1asXjxYn7++WeaNGnC\nc889R48ePawuz2MHDx5kzZo1/P777zz55JN88803FBUVua9Ar81MC+dziY6O5scff3QvcGKSqKgo\nAgIC+Oqrr7jmmmsqzByY8qCbk+3Zs4cffviB0tJSjh49ytdff83XX39t1EWRZWVlbN26lWuvvRaA\n7OxsysvLLa7Kc0FBQXz66ae0bdsWl8vFN998U+sPLE7o3r071113HVOmTKlwftvPz49mzZpZUtMF\ne+R98tGR0+mkY8eOtGvXjscff9zIW0qGDx9OTEwMK1asYMmSJaxcuZIPPvjAiCkpX9O9e3d2797N\nxRdf7L6dxGazWbIKk7dGjBjhftqeKV+wp9OrVy969OjhXlL0BJOW3922bRvPPPMMP//8My6Xi+bN\nmzNhwgTjfjnMzc1l1qxZZGdnY7PZaNWqFSNGjMBut1tdmke+++4798JSeXl5ltV/wR55n3yFZmBg\nINdcc40l9+pVlUOHDjFgwAA+/fRT4PiX1uLFiy2u6sKUlpZ2ytjXX39tQSXeu//++/n888958803\n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\nTzx/PDU1FTj+mFOHw0F2draVZXls+/bt7r8fO3aMrKwsrr76aku+bL3VpEkTox5qcya+cM+90+kk\nJycHf39/du3axZ/+9Cd27dplSS0Kb5Eq4kuPmU1OTiY3N5dPP/2UTz75hMDAQKOWsTxh7NixFV6X\nlZUxcuRIi6rxzInbwy6//HISExOJjo6uMAvSv39/q0rzii/ccz9q1Cg2b97MI488wkMPPcTBgwf1\nPG8R0/nCY2YLCwtJTU0lJSWFX375he7du1NcXExaWprVpXnl8OHDFV47HA527txpUTWe2bdvH3D8\n+oP69evjcDgsruj8/O1vf2PQoEH88ssvTJo0iW+++Yb77rvP6rI80r59e/ffV69ebWElulVMRE5y\n/fXXc+WVVzJ27FhiY2Px8/OjT58+fPjhh1aX5pXOnTu7n5Bms9kICQnh3nvvpV+/flaXVmkul4sf\nfvjBvbLXt99+S5s2bYw8LbNnzx4j77kfNGjQWd+34ml7OvIWEbfp06eTkpLCk08+SadOnSy5BaYq\nrVmzhqNHj1KnTh0AiouLCQkJsbgqzyQlJVG/fn13eK9fv57333+fadOmWVyZZ7Zt28bs2bPZtWsX\nNpuNq666imHDhhmxjHD9+vXZtWsXN954I926daNJkyaWX5CqI28ROcWBAwdYtWoVKSkpZGVlce+9\n99K3b1/jrjZ/55132LBhA6+99hpw/P71mJiYcx5J1SanW2hm4MCBZ318a2105513MnLkSFq3bo3L\n5eK7777j5ZdfNmZW59ChQ3z++eesXLmS/fv307lzZ7p3706zZs0sqcfPkr2KSK12ySWX0L9/f5KT\nk/nss8+49NJLjVrY5ISVK1fyyiuvuF+/+uqrrFy50sKKPGez2fjqq684ePAgxcXFfPbZZ/j5mffV\nXb9+fTp16kRYWBjh4eF06dLFqEWA6tWrxx133MFrr73G3LlzCQgIID4+nttvv92SenTkLSI+6+67\n72bu3LnUr18fOL7W+ciRI416ZOuePXt44YUX2LJlCwEBAURGRjJy5Ejj1pmfMmUKZWVlxMTEUF5e\nzqZNmygtLaVLly4ARtwOV1xc7L6gc//+/XTv3p2ePXtaMiOl8BYRn/X1118zefJk6tSpQ3l5OeXl\n5UyaNIm2bdtaXZpHnE4nDofDuMA+2cMPP0xZWRl+fn4EBgZyySWXVHi/Np/DX7lyJZ988gm//fYb\nnTt3pmfPnpY/KEbhLSI+b//+/fj7+58SGCb49NNPmTNnDi6Xi08++YSpU6cSGRnJHXfcYXVplXL0\n6FEmTJhAVlYW11xzDS6Xix9//JEbb7yR8ePHExwcbHWJ59SyZUsaN27snuY/caX/ibsYrLjaXOEt\nIj7r5CNvp9OJn58fkydP5q9//avVpVXagAEDmDdvHg8++CDJyckcPnyYwYMH895771ldWqU888wz\nXHHFFdx///0VxufPn8/OnTuZPHmyRZWZTbeKiYjPevnll0lOTsZutwPHFz5JTExk0aJFFldWef7+\n/tSpU8d9tGfCkerJMjMzGT9+/Cnj9913H3fddZcFFfkGhbeI+KzAwEB3cAP86U9/qrDEqAmioqJ4\n4oknyM3N5e2332bt2rW0a9fO6rIqzd/f/4zvmXjVfG1h1r9iEREPNGrUiKeffpqbbroJl8tFRkYG\nV155pdVlVcrIkSN56aWXGD16NBkZGe6FQUaNGkWbNm2sLq/SGjRoQEZGxikXCX755ZfGPykNYMuW\nLe4FdGqSznmLiM86duwYKSkpZGdnY7PZiIyMpHfv3mc9GqwtBg0aZMmFUFVt9+7djBgxgqZNm3Lt\ntddSXl7O5s2bycnJ4a233qJBgwZWl+iR0tJSnn32WXr06EH79u2Jj49n8eLFNV6HwltEfNaJo1cT\n3XrrrWddntakRXNcLhfr169n586d2Gw2mjVrRocOHYxZn33dunUsWbKEtm3bct999/HTTz+xYsUK\n0tLSiI6OZurUqTVek6bNRcRn1a9fnxdeeIFWrVoRGBjoHjdhQZCLLrrIiHW/K8NmsxEbG0tsbKzV\npXhlzpw5vPHGGyxevJjFixdz880388MPP3DjjTda9rQ3hbeI+KTS0lJKS0v57bffTvmCNSG8L730\nUu68806ryxCOX1i3d+9e2rRpw2OPPcaqVasYPXo0kZGRJCQkWFKTwltEfM7q1at59tlniYiIoLCw\nkOeee46oqCiry/LI9ddfb3UJ8v899dRTLFu2jLp16zJo0CD+85//0LRpU3788UecTqclNemct4j4\nnLi4OF5//XUuueQS9uzZw1NPPcXcuXOtLkt8xLJly3j33XepV68eY8aMseQXQx15i4jPOXnt7EaN\nGnH06FGLKxJf0q9fP/r162dpDbpDXkR8zh+vYjblqmaRytK0uYj4nOjoaJo1awYcv01p165dNGvW\nzP0gieXLl1tcocj5UXiLiM/Jyck56/tXXHFFDVUivmTfvn04HA5atWrFRx99RHZ2NvHx8e5fFGuS\nwltERKQSEhISePLJJzl69CgvvPACo0aN4pVXXuGtt96q8Vp0zltERKQS/P39ufbaa0lNTWXw4MH8\n9a9/payszJJaFN4iIiKVUFZWxquvvsqaNWvo2LEj33//PYcOHbKkFk2bi4iIVMK+fftITU2lQ4cO\nXH311axcuZI///nPXHfddTVei8JbRESkkjIzM9m3bx+9e/cmLy+vwvPia5IWaREREamEGTNmsG/f\nPn799Vd69+7N0qVLOXDgAOPHj6/xWnTOW0REpBKys7N58cUXqVevHgAjRozghx9+sKQWhbeIiEgl\nHDt2DKfT6V6xb//+/ZYtvatpcxERkUq4//776d+/P3v37uXBBx9k586dPPHEE5bUogvWREREKqmk\npIQdO3YQFBTEn//8Z4KDgy2pQ0feIiIiZzFy5MizPtxm1qxZNVjNcQpvERGRs0hISDjje/n5+TVY\nyf/RtLmIiEglHDt2jPXr11NYWAiA0+nk9ddfZ/Xq1TVei468RUREKuHRRx+lXr16bNy4kc6dO5OR\nkcHw4cMtqUW3iomIiFTCgQMHmDFjBo0aNWLChAksWrSIdevWWVKLwltERKQSnE4nOTk5+Pv7s2vX\nLoKCgti1a5clteict4iISCWkp6dTVFREWFgYSUlJHDx4kHvvvZcRI0bUeC0KbxEREQ/t3buXBg0a\nUKdOHUv2r2lzERGRs0hPT2fgwIHA8Wd6Dx48mPvvv5/bb7+dL7/80pKadLW5iIjIWfzzn//kH//4\nBwBpaWkcPHiQTz/9lKKiIoYPH87NN99c4zXpyFtEROQs6tSpw5VXXgnAl19+yd///nf8/PyoX78+\n/v7+ltSk8BYRETmL0tJSysvLOXz4MOvWraNjx47u90pKSiypSdPmIiIiZ3HHHXdw1113UVpaSmxs\nLM2aNaO0tJQJEybQpk0bS2rS1eYiIiLnkJOTQ3FxMS1btnSPLVu2jL59++LnV/OT2ApvERERw+ic\nt4iIiGEU3iIiIoZReIuIiBhG4S0iImIYhbeIiIhh/h9F2G85FAb/mgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n1qxZx6wVzfrW6me6RGxsrF5++WVVVlYqNjZWzz77rAYPHqzPP/9cJ598csCYk046SW+//bauvfZa\nPfPMM5Kkqqoqvfbaa+rcuXPAmNNOO03z5s3Txo0bdccddyg9Pb3Fgb3ssss0ZcoULViwQH/5y18k\n/XyraPbs2brmmmsCxixYsEBt7dBTAAANzklEQVRLly7Vww8/3Oz1A932laSbbrpJ1113nc455xx9\n/fXXmjp1qqSfb1eNGjUqYMyZZ56pBx54QNOmTVNsbKxuvvlm//9/+umnkI2B9PPJYNasWRo7dqzi\n4uKaPBbsK3C7deumBx98UEOHDlVCQoIkqby8XIWFhUpOTg4Yc+mllyojI0N1dXUaO3assrOz1atX\nL23ZskWXXXZZm/K88847QfM89NBDmjlzpmpraxUfH6/f//73Ou+881RdXa377rsvYMynn36qQYMG\nybIsHTx4UP3799fo0aOVm5urQYMGBYw5fCKPiorS8OHDNXz4cNXW1qqkpERlZWUBY7777js98sgj\nsixLFRUV/tudb7/99jHnys7c2pmjxMRE5eXlqVevXtqwYYP/FvHChQvVpUuXgDF29lU7eeycF+wc\nr3bOWZJ0/fXXa9SoURo+fLiSk5P117/+Vf3799ff//73Zr9EHWZnH5J+/rrq/v37629/+5smTpzo\nX7cTjJ1xsNMfO3N0+JiQ1KZj4shfpE466SRde+21uvbaa4MPguztq7fccouuu+46vfnmm4qLi9NZ\nZ52l5557Tn/5y1/atCbGuPe8S0tLtWTJEiUkJGjcuHF6/vnn5fP5lJycrNtvvz3gHzf58ccftWrV\nKo0fP96/7eOPP9batWs1adIkde3a9Zg56+vr9be//U0ffPCBCgoKjvncXbt26de//rX/399//71+\n/PFH/fa3v5Ukbdq0qdl7Ozt27JDX69VJJ53UZPuR7zsF6tPOnTuVnJysU089VdLPv9Ed/s3y6DwN\nDQ1644039Ic//KHJb587duzQypUrdc8997RqDN5//30tX778mM89lsbGRkVGRjZr36FDh/TWW2+p\nqKjI/wdrvF6vUlNTNWLECEVGBl5b+c0338jj8ej000/Xjh07tHnzZiUnJ+vCCy8MOA5280g/v6+6\na9cuWZalxMRE/eY3v/E/FmheA/nnP//p/7O3R8c888wzmjhxYouvcaTXXnutyb/79Omjs88+W4sX\nL9b1118f8H3oo7V2bu2MXW1trVasWKFvv/1WF1xwgW666SbFxMRow4YNGjhwYLN9XrK3r9rJc6zz\nQk5OTtCi39bj9VjnrIkTJ+q0004LmEeStm3bpnXr1vn3u9NOO02XX3550H3Nzj50tG+//Vbr16/X\nuHHj/NtCdd5qa3/szJHdY2Lr1q3+80YwoTqvHjhwQJ06dWq2/V//+pfOOuus1p1PWn2D3QAbN24M\n+lhpaan/fcedO3da77zzjv99htbGrF69usWYlgR6j2vbtm3WJ598Yh06dKjJ9vfeey+keYI51ri1\nR9ssK3Tts5PnyHndsWNHu81rKGOcnCOncoX6eLXTNqf6Y+ocHdbScdSecxSMnfPC8ZxLLMtd5++w\n+qjYokWLAm5/+umnlZ2drRtuuEFvvvmmJk2apOLiYs2cOVNPPfVUq2M++uijY8a0hnXUjY7HHntM\n06dP17PPPqs//OEPTT5+tGTJkpDlOZZg49ZebQtV++zkOXpec3Jy/PMayjyhjgnWtgULFoR8jpza\nH0J5vNppm1P9aY/jyMn9QWr5OGqvOToWO8fr8RzjkrvO38a953333XcH3G5ZlrZt2xbwsQ0bNuid\nd95RZWWlfv/73+udd96Rx+NRQ0ODMjMzA36E6+iY1atXKz4+/pgxrXH0ey7FxcV6+eWXJUlfffWV\n/t//+3+aP3++evToYfvzuoHy2Bm39mpbqNpnJ09L85qTkxOSPHZi7IzBxo0bbc2RU/uDU8ernbY5\n1R+7x5GT+0NLWjqO2muO7IxBe51LpI47fwdiXPG2s5JZavsq8KNj4uPjWxXTVqFaedgSuyvAnWib\n3fbZ5cS82uHkHDmVy6nj1U7bnOqP2+fILifmyM4YOHkucXK8m7F9U76D/PTTT9aUKVMCfvYu2Gfk\nnnjiCevuu+9usm3z5s3WjTfeaD377LMhi2mNo9v49ttvW1dddVWT/uzZs8f605/+ZPXp0ydkeeyM\nW3u1LVTts5PHqXm1E+PkHDmVy6nj1U7bnOqP2+eoNUJxHDk13u11LgkU79R4B2Jc8T6WhoYGy7Is\n6/PPP2/22M6dO5v8e8+ePdbWrVv9/w5VTEtWrFjRbNvhL/042j//+c+Q5gnmWOPWHm2zrNC1z04e\np+Y1lDFOzpFTuUJ9vNppm1P9MXWODgvVceTUeIcy5khuOn+HVfE+rL1X/rYU88QTT1gDBgywBg4c\naA0cOND/s10dncduTLiNg508bp8jN+Qixh1zZOq+eqKet4x7z7s1rHZe+dtSzNq1a/Xee+81+4IS\nuzo6j92YcBsHO3ncPkduyEWMO+bI1H31RD1vhdVHxQ4Lxcrf44k555xzFB0dut+LOjqP3ZhwGwc7\nedw+R27IRYw75sjUffVEPW+F5ZV3R2tsbFRaWpp++9vfKioqSpZlKSIiQgsXLjQyj13hNg528rh9\njoDD2Fd/5ubzyZHCsnh39K2X7OzsNr+Wm/PYjQm3cbCTx+1z5IZcxLhjjkzdV0/U81bU7NmzZx/X\nK7jQoUOHWvyO2vaM8Xg8evvtt/Xuu+/qiy++UENDg4YOHdrqv6/rtjx2Y8JtHOzkcfscuSEXMe6Y\nI1P31RP1vGXcHyY57Mknn9SLL77ofz/h8C2HoqKiDo+544471L9/fw0YMED19fX66KOPtGXLFj3+\n+ONG5rETE47jYCeP2+fIzccRMc7mcvO+ynkrgFavS3eZ66+//ph/JL0jYwJ9NGDcuHHG5rETY1nh\nNw528rh9jtx8HBHjbC4376uct5ozdrW5Uyt/7cQ0NjY2+busmzZtUmNjo7F57K6KDLdxsJPH7XPk\n5uOIGGdzuXlf5bzVnLEL1pxa+Wsn5v7779fDDz+s7du3S5IuuOACzZo1K+T9cSqP3VWR4TYOdvK4\nfY7cfBwR42wuN++rnLeaM/Y9748++ijg9ksvvbTDY+xwcx6n2uZkLif71FZOzpGbjyNinM/VVm4e\nu3A8bx3J2OJdVVWl/Px8ffnll4qMjNRFF12kMWPGqHPnzh0Wk5OTo0WLFmngwIFNPphvtWLxghvz\n2I0Jt3Gwk8ftc+R0LmLcO0cm7Kuct5oztng7tfL3uFcEtmN/nMrjVNuczOVkn5xom93+uPk4Isb5\nXG3l5rELx/PWkYx9z7u6ulp/+tOf/P/u06ePxo8f74qYsWPHNtsWFRWlM844Q7fddpt+85vfGJXH\nToyT7XNzHrfPkZuPI2KczeXmfZXzVnPGFu/DK/V69uwpqW0rf9s75pJLLlFdXZ2uuuoqRURE6P/+\n7/8kSeeff76mT5+uZcuWGZXHToyT7XNzHrfPkZuPI2KczeXmfZXzVgCt/lCZy5SUlFhjx461UlNT\nrdTUVOuWW26xtm3b5oqYQH9I/ZZbbrEsy7KysrKMy2Mnxsn2uTmP2+fIzccRMc7mcvO+ynmrOWOv\nvLt37678/HxXxtTX1ys/P199+/ZVZGSktmzZooqKCn322WdBv+fWzXnsxDjZPjfncfscufk4IsbZ\nXG7eVzlvNWfcgjWnVv4ez4rAvXv3aunSpdq+fbssy9KZZ56psWPHqr6+Xp07d9a//du/GZHneFdF\nhss42MnjVNvs9sfNxxExzueS3Lmvct4KzrjibYrvv/9eO3fuVL9+/VRXV2f7S+3dkseucBsHO3nc\nPkfAYeyrP3Pz+eQwY2+bO7Xy107M0qVLVVhYqNraWr3xxhuaP3++kpKSdNttt4W0P07lsbsqMtzG\nwU4et8+Rm48jYpzN5eZ9lfNWc8YWb6dW/tqJeffdd/XSSy9pzJgxkqQZM2YoIyPjmJPi5jx2V0WG\n2zjYyeP2OXLzcUSMs7ncvK9y3gqgxSVtLuXUyl87MRkZGZZl/fJXY2pra60bbrgh4HNNyGN3VWS4\njYOdPG6fIzcfR8Q4m8vN+yrnreaMvfJ2auWvnZgrrrhCY8eO1bfffqtZs2apuLhY48aNC3l/nMpj\nd1VkuI2DnTxunyM3H0fEOJvLzfsq563mjF2w1t4rf48nJjs7W/PmzdOmTZsUGxurCy+8sMWVg27O\nY3dVZLiNg508bp8jNx9HxDiby837Kuet5owt3pJzK3/bGnPPPfdoz5496tmzp2JiYvzbp06damQe\nuzHhNg528rh9jpzMRYy758jt+yrnraaMvW3u1MpfOzGXX365I/1xKo/dVZHhNg528rh9jtx8HBHj\nbC4376uctwJo9bvjLnPzzTdblvXLQoHGxkYrPT3dFTF2uDmPU21zMpeTfWorJ+fIzccRMc7nais3\nj104nreOFHl8pb/jNDQ0SJL/W20OHjyoQ4cOuSLGDjfncaptTuZysk9t5eQcufk4Isb5XG3l5rEL\nx/PWkaJmz549u10ztJPy8nI9/vjj+vbbb/Wvf/1LeXl5ysrK8v9Vl46Mcao/TuVxqm1O5nKyT060\nzW5/3HwcEeN8rrZy89iF43mriXa9rm9HN998s7Vz507r7bfftv7nf/7H2r17t2ti7HBzHqfa5mQu\nJ/vUVk7OkZuPI2Kcz9VWbh67cDxvHcnY1eZOrfw93hWBreXmPE61zclcTvaprZycIzcfR8Q4n6ut\n3Dx24XjeOpKxq82dWvl73CsCwyCPU21zMpeTfWorJ+fIzccRMc7nciKPm2Ps6ojzibFX3gAAnKiM\nXW0OAMCJiuINAIBhKN4AABiG4g0AgGH+P77q60dkD0cAAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\ne/bs0e7du7V7927t2rVLWVlZVo9nLK68w8DOnTt11113qVu3bnI6nQoGg7LZbKqoqLB6NBiqpaVF\nV111Vejr2NhYC6eByb766iv98Y9/1Ndff625c+fq4MGDioiI0KWXXqq77rrL6vGMRbzDAE8Go6ON\nHDlS48ePV0JCgoLBoLxer+6++26rx4KBkpOTlZycrDvvvFPz5s2T0+nUsWPHdOzYMd12221Wj2cs\nHlgLA999950KCwt18OBBLVmyRH/605908803sz6JdqutrVVTU5P++c9/KjIyUjfeeCPnE85LRkaG\nlixZEvp73vv371d2drZWr15t8WRmYs07DDz77LMaMWKEfvjhB0k/3uLMycmxeCqYbMaMGerdu7dG\njRqlkSNHEm6cN4fDccoHtFxxxRWy27n52178mwsDJ06c0B133KFly5ZJkgYPHqzCwkKLp4LJ3G63\nMjIyFB8ff8pnB/BpWGivK6+8UnPnztWtt96qYDCoysrKU56rwLkh3mHAbreroqJCJ06ckN/v15//\n/GdddNFFVo8Fgw0dOvS0bfxWMZyPefPmad26ddq+fbtsNpsGDBigO++80+qxjMWadxiora3V4sWL\nT/ls82nTpp1yiwo4F++///4ZY83v8wa6Bq68DfbKK6/o6aef1rvvvqu8vDyrx0EYqa6uDv35+PHj\nqqqqUt++fYk30EUQb4N99NFH2rNnj7xer77++uvTvr948eL//lAIC88888wpX7e0tOjJJ5+0aBoA\n/4l4G2zlypXavXu39u3bp/vvv9/qcRBG/vN3d/t8Pn311VcWTQPgP7HmHSa+++47ffvtt0pOTlZz\nc7OcTqfVI8Fgw4YNC/3ZZrPJ5XLp/vvv17hx4yycCsBJxDsMLF++XKWlpWpsbFRJSYny8vLkdrv1\n6KOPWj0aDHfyoyxdLpfVowD4CT6kJQxs2rRJa9eu1aWXXipJys3N5dfs4byUl5frV7/6lSZNmqTx\n48frzjvv1Pbt260eC8C/seYdBlpaWiT979/DPXbsmI4fP27lSDDckiVLtHLlSj7KEuiiiHcYuOOO\nO/TAAw/om2++0ezZs1VZWakHH3zQ6rFgMD7KEuja+K8xDGzdulULFixQVVWVnE6npk6detovvQfO\nxZk+yrJ3795WjwXg33hgLQw8/fTT2r9/P59DjQ6zb98+vf/++6qrq1NZWZkiIiL02muvqW/fvlaP\nBkBceYeFM30ONXA+Zs6cqWeffVbHjh3TF198oenTpys/P19vvfWW1aMBEPEOC/fcc4/VIyDMREZG\nqn///lqwYIEeeughDRgwgIcggS6EvyoG4DQtLS36/e9/r82bN+v222/XP/7xDzU2Nlo9FoB/Y80b\nwGn279+vDRs2KDU1VX379tUd8Lk7AAAAMElEQVT69et19dVX64YbbrB6NAAi3gAAGIfb5gAAGIZ4\nAwBgGOINAIBhiDcAAIb5/71zTzpm5KHQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting all categorical variables\n",
    "for i in train.columns:\n",
    "  if train[i].dtype == 'object':\n",
    "    train[i].value_counts().sort_values().plot('bar')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 108728,
     "status": "ok",
     "timestamp": 1552319400920,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "aRvMydmSHR6f",
    "outputId": "785f76a5-8325-458e-d0e1-e3887680b251"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d0dcc7b8>"
      ]
     },
     "execution_count": 18,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nR48eldPplNPplNvtlvTdC8ssy6pzNw0AAL53RUE9adIk76u3S0pK1KlTJ3Xv3l2lpaU6efKkTp8+\nLZfLpV69eqlPnz5av369JGnz5s2Ki4trutkDABDk6n3ou6ysTH/4wx/01VdfKSwsTIWFhRo1apQm\nT56sa665RpGRkcrKylJERIQyMjKUlpYmm82m9PR0ORwOpaSkqKioSKmpqbLb7crOzm6O4wIAICjU\nG9Rdu3bVypUr/drvvfdev7bk5GQlJyf7tIWGhiorK+sHTBEAgKsXVyYDAMBgBDUAAAYjqAEAMBhB\nDQCAwQhqAAAMRlADAGAwghoAAIMR1AAAGIygBgDAYAQ1AAAGu6KPucQPN33HXr+22bd3aoGZAA03\nLntTre15mYnNPBPg6sGOGgAAgxHUAAAYjKAGAMBgBDUAAAYjqAEAMBhBDQCAwQhqAAAMRlADAGAw\nghoAAIMR1AAAGIxLiAIIiPRNU/3achPntMBMgNaNHTUAAAYjqAEAMBhBDQCAwQhqAAAMRlADAGAw\nghoAAIMR1AAAGKxBQb1nzx4NGDBAq1atkiQdPnxYo0eP1siRI/X444/r3LlzkqSCggI9+OCDGjp0\nqN544w1JUlVVlTIyMpSamqpRo0bpwIEDAToUAACCT71BXVlZqd///vfq3bu3t23+/PkaOXKkXn31\nVf3kJz9Rfn6+KisrlZubq5dfflkrV67UihUrdPz4cb3zzjtq27atXnvtNU2cOFE5OTkBPSAAAIJJ\nvUFtt9u1dOlSOZ1Ob1tJSYn69+8vSUpISFBxcbF27typbt26yeFwKCIiQj179pTL5VJxcbGSkpIk\nSfHx8XK5XAE6FAAAgk+9QR0WFqaIiAiftjNnzshut0uSYmJi5Ha75fF4FB0d7a2Jjo72aw8JCZHN\nZvM+VA4AAOr2g6/1bVlWk7TX1K5dpMLCQv3aY2MdDZ5Xa6s1ZR611e4JUL/7A9Rvc/VZV21t56w1\nna9A1V6u7n9+9aD36+pz1+ftN5tsXGoDW9vS4wd77RUFdWRkpM6ePauIiAgdOXJETqdTTqdTHo/H\nW3P06FHddtttcjqdcrvd6ty5s6qqqmRZlnc3fjnl5ZV+bbGxDrndFQ2aX2urrdaYemobV9vS41Pb\n9H2acN+ltuXHD5bauoL7it6eFR8fr8LCQknShg0b1LdvX3Xv3l2lpaU6efKkTp8+LZfLpV69eqlP\n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\nCy+oqKio1mPbt2+fdu/eLY/Ho/DwcO812idNmuRT+8knn8jlcumGG25QXl6eYmJiZLfbtXXrVu3a\ntcunzw8//FALFy7Uo48+qj179mjQoEEaPXq0EhMT1blzZ5/a6n4nTpzorR0zZoz++Mc/auLEiT61\nx48f1+7duzV27Fhv7YIFC1RRUeHzoTDV5/bee+/V2LFjde7cOR0+fFiWZSkxMdHvf8X33nuvXC6X\nDh8+rIceekizZ8/W6NGjVVZWpsrKSp/a//mf/9GKFSt07tw5/fGPf1R4eLgk6fXXX/f5WZSk+++/\n3zuHS89DzTmcOnVKFRUVqqqq0oULF/TNN994X0Rz4sQJnz7379+vffv26brrrtPEiRM1YcIEjR49\nWmvXrtX+/ft9ardv3664uDilp6frySef1JNPPinpu0v+btu2zad27dq1kqQNGzZo7dq1WrNmjZ56\n6imtXbvW776zfft23XnnnVq/fr1P7YULFzRixAif2r///e/q16+f1q5d66197rnnNHbsWO3du9dv\nDtV//vrXvyo5OVkXL170ttUUFxenuLg43XHHHYqLi9Phw4f11FNPKTExUYcOHfLWvfPOO4qMjFRK\nSoomTJig3/zmN/J4PIqNjdV7773n02fNeV56Di4d/+DBgxo1apRSUlJUWlqqQYMGqW3btnrooYf0\n97//3af2b3/7m+655x6lpaXprrvuUnFxsZ566indcMMN3l1dtWXLlikrK0sbN27U3LlzFRkZqa5d\nu6q4uNi7A632n//5nxo8eLAiIyNVVFSkpKQkTZ48Wffcc49uueUWv36zs7MVERHhrZ0yZYrmz5+v\nRx991Kf2nXfe0bx58yTJW/vuu+/qzJkz+uabb/zmUO3QoUP67LPPdMMNNygpKUlbt271qb322muV\nlZWlrKws3XfffZoxY4YmT56sXbt26ezZsz612dnZGjlypJYuXaoZM2bo/PnziomJUX5+vnbs2OGt\nq7m7vvQcXDr++vXr9eabb2rp0qU6cuSI9u/fr+uvv16VlZU6efKkT+2rr76qhQsX6t1339WQIUM0\ncuRITZ48WX/605908OBBn9pPP/1U4eHh2rhxo5599lm1adNGbdq00bZt21RWVqaGCvi1vq/EkiVL\ntGbNGrVt21b5+flKS0vTsmXL5HA4vC9KqLZ48WJv7RtvvHHZ2pp9Xlp36cMxddVeOv7laiU1uLa+\n46rvHDTFfOurrWsOL774opYvX65Dhw7pkUce0cKFC9W5c2d5PB5NnDjR51WjCxcu9NZOnDjRr7Zf\nv3619vtDa2vOoSlra86h5rHVdx4aOodAHVdubq6ioqJ82qqqqvx+0Vyu9ttvv23x2h8638aMv3Dh\nwhadq/TdL/2at3vllVfUsWNHud1uPfbYY+rbt2+Da++6664rqt2zZ0+TzaFmbX39Nma+1f02Zq6N\nGb8x/c6fP1+LFy/2qy0vL9fDDz/s8/ujLkYGdWhoqKKioiRJw4YNU3R0tNLS0rRo0SK/UK1ZO3z4\ncMXExNRaW1ddXePX1Wdz1TbVOQjUHOx2uzp06KAOHTrI6XR6d8bXXXed2rRp49MntY2rDdT477zz\njhYuXKhPP/1UmZmZuv7667V161Y99thjulSw1rb0+I2trXmf+4d/+Ad17NhR0nc7x7CwsGaprak1\n9duU4zem9vz587r22mslSQ6HQ9dff70kKSoqym9jVBcjg7pnz556+OGH9fzzzysiIkIDBgxQmzZt\nNHbsWB0/fvyKagPRJ7XfiYmJ0UsvvaS0tDS9/vrrkqSvv/5aeXl5fg+NUtu42kCN36ZNG02ZMkWf\nf/65nnnmGfXo0UMXL15UbYK1tqXHb2zt3r179fjjj8uyLH355Zd67733NHDgQOXl5cnhcFB7SW1L\njy9JaWlpGjx4sPr06aOoqCilp6erR48eKikp0dChQ2td51o1+NnsZrZ9+3a/F0dVVFRYq1evvuLa\nQPRJrWWdOXPGevfdd31qysrKrOXLl/u9KIfaxtUGavxLrVmzxpo8eXKdNcFe29Lj11dbUlLi8+fr\nr7+2LMuyCgoK/F5MS23Lj1+tvLzcevfdd60lS5ZYixcvtt58803vbRrKyAueAACA7xj5qm8AAPAd\nghoAAIMR1AAAGIygBgDAYAQ1AAAG+z/DSTwjjMUcowAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['age'].value_counts().sort_index().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xnSTysgKHR3U"
   },
   "outputs": [],
   "source": [
    "# # Converting age variale into categorical variable using binning\n",
    "# cut_points = [30,40,50]\n",
    "# labels = [\"youth\",\"middle\",\"old\",\"very_old\"]\n",
    "# train[\"age_cat\"] = binning(train[\"age\"], cut_points, labels)\n",
    "# # print(pd.value_counts(train[\"age_cat\"], sort=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FqV5VQPMHR0x"
   },
   "outputs": [],
   "source": [
    "# train['age_cat'].value_counts().sort_index().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ElbwjrkoHRyT"
   },
   "outputs": [],
   "source": [
    "# train[(train['education'].isin([\"Bachelor's\"])) & (train['age'] < 21)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 109360,
     "status": "ok",
     "timestamp": 1552319401577,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "cw_e6ZoGHRvF",
    "outputId": "ddcfef24-fff4-4e21-93dd-fece8bad75b7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d0cc0e80>"
      ]
     },
     "execution_count": 22,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAesAAAFLCAYAAAD276RPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XlcVPXi//H3sF3EcEEZSivTcilT\nEzVErhmohbaJFzQMtDIrtcVH3NxyN4UsSzOXsqy+2uKVNuuWeBP0apCalKItlN5cSwZFMcBEPL8/\njPNjZFME54iv5+Phgznncz6f8zmfZubd55wzMzbDMAwBAADLcnN1BwAAQMUIawAALI6wBgDA4ghr\nAAAsjrAGAMDiCGsAACzOw9UdKIvDccx83LChj3Jy8svdtqLyqpbRruv2Sbu06+p90i7tumKf/v6+\n5e5Dughm1h4e7lUur2oZ7bpun7RLu67eJ+3Srqv3WRbLhzUAAJc6whoAAIsjrAEAsDjCGgAAiyOs\nAQCwOMIaAACLI6wBALA4whoAAIsjrAEAsDjCGgAAiyOsAQCwOMIaAACLs+SvbqF67Pl22um/fy1f\n3XGS6zoDAKgyZtYAAFgcYQ0AgMVxGvwitzBhrfl4+NhbXdYPAEDNYWYNAIDFEdYAAFgcYQ0AgMUR\n1gAAWBxhDQCAxRHWAABYHGENAIDFEdYAAFgcYQ0AgMUR1gAAWBxhDQCAxRHWAABYHGENAIDFEdYA\nAFgcYQ0AgMWd1e9Zz5o1S1u2bNHJkyf1yCOPKDk5WTt27FCDBg0kSUOHDtWtt96qlStX6u2335ab\nm5sGDBigqKgoFRYWauzYsTpw4IDc3d0VHx+vq666qkYPCgCA2qTSsP7666/1888/a/ny5crJyVFE\nRIS6du2qp556SqGhoeZ2+fn5mj9/vhITE+Xp6anIyEj17t1bKSkpqlevnmbPnq0NGzZo9uzZmjNn\nTo0eFAAAtUmlp8G7dOmiuXPnSpLq1aungoICFRUVldpu69atateunXx9feXt7a3AwEClp6crLS1N\nvXv3liR169ZN6enp1XwIAADUbjbDMIyz3Xj58uX65ptv5O7uLofDocLCQjVq1EgTJ07UV199pYyM\nDI0fP16SNGfOHF1xxRVKSkrS6NGj1aZNG0lSjx499J///EdeXl7l7ufkySJ5eLif56FdGqbFfWo+\nnjT7LqeyLaufdlrudNvzF6RPAIDqdVbXrCXpyy+/VGJiopYsWaLt27erQYMGuv766/Xaa6/plVde\nUceOHZ22L+//Ac7m/w1ycvLNx/7+vnI4jpW7bUXlVS27GNuVVKVyKx4L7dKuK/dJu7Trin36+/uW\nuw/pLO8GX79+vRYtWqTFixfL19dXwcHBuv766yVJYWFhyszMlN1uV3Z2tlknKytLdrtddrtdDodD\nklRYWCjDMCqcVQMAAGeVhvWxY8c0a9Ysvfrqq+bd348//rj27t0rSdq4caNatmypDh06KCMjQ7m5\nucrLy1N6ero6d+6skJAQrVq1SpKUkpKioKCgGjwcAABqn0pPg3/++efKycnRqFGjzHX9+/fXqFGj\nVKdOHfn4+Cg+Pl7e3t6Ki4vT0KFDZbPZNHLkSPn6+qpv375KTU1VdHS0vLy8lJCQUKMHBABAbVNp\nWA8cOFADBw4stT4iIqLUuvDwcIWHhzutK/5sNQAAqBq+wQwAAIs767vB4RqZD91/+u9fy61ef8tV\nXQEAuAgzawAALI6wBgDA4ghrAAAsjrAGAMDiCGsAACyOsAYAwOIIawAALI6wBgDA4vhSlEvU+M0/\nOy3P7NLSRT0BAFSGmTUAABZHWAMAYHGENQAAFkdYAwBgcYQ1AAAWR1gDAGBxhDUAABZHWAMAYHGE\nNQAAFkdYAwBgcYQ1AAAWR1gDAGBxhDUAABZHWAMAYHGENQAAFkdYAwBgcYQ1AAAWR1gDAGBxhDUA\nABZHWAMAYHEeru4A4EoPJiQ7LS8ZG+aingBA+ZhZAwBgcYQ1AAAWR1gDAGBxhDUAABZHWAMAYHGE\nNQAAFkdYAwBgcYQ1AAAWx5eioNbji08AXOyYWQMAYHGENQAAFkdYAwBgcWd1zXrWrFnasmWLTp48\nqUceeUTt2rXT6NGjVVRUJH9/fz3//PPy8vLSypUr9fbbb8vNzU0DBgxQVFSUCgsLNXbsWB04cEDu\n7u6Kj4/XVVddVdPHBQBArVFpWH/99df6+eeftXz5cuXk5CgiIkLBwcEaNGiQ+vTpoxdffFGJiYnq\n16+f5s+fr8TERHl6eioyMlK9e/dWSkqK6tWrp9mzZ2vDhg2aPXu25syZcyGODQCAWqHS0+BdunTR\n3LlzJUn16tVTQUGBNm7cqJ49e0qSQkNDlZaWpq1bt6pdu3by9fWVt7e3AgMDlZ6errS0NPXu3VuS\n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\nXAMGDNDf/vY3p/bi4uI0e/Zsff/997rhhhskSSdOnNA777yjzMxMtWzZUvfdd5/c3Nz0448/ql27\ndiosLNSKFSv0yy+/qHnz5srNzVVkZKQCAgJK9ffkyZNavXq1GjZsqODgYKWkpGj79u1q1qyZ7rjj\nDrm7u+u7774rc5yuu+46xqiSMWrWrNkl8b4tnf/rrTKWuht80qRJuuKKKxQSEqINGzbIMAx16NBB\nH374ob7//nvdfvvtCg0NVaNGjWQYhg4ePKikpCQdPnxYM2bMKLPNYcOGycvLSz179pSfn5/effdd\nde3aVSNHjpQk3XzzzRo8eLCysrJ06NAhNW/eXLfddpu2bdum6dOnKyAgQJ6enioeJofDIX9/f9ls\nNjVt2lT/93//J+n0C6Z169bq2bOnNm7cqJdffllxcXGKiopSXFycrrvuOv3973/Xjh07NGvWLIWH\nh+uPP/5QTEyMbr75ZrO/jz76qDp27KijR48qPT1dgYGB6tatmzIyMvTDDz+oQYMGVRqj3NxcTZ06\ntdyxv+WWWzRq1KhzHqO1a9dqw4YNstvtZY5Tdna2tm3bds5jtGbNGh08eFA33njjOY9TYmKiIiMj\nyxyjgIAA/f7777r66qvP+bl0KY3R8ePHlZubq7CwMPON7+DBg1q9erWaNWumMWPGlDlGXbt2Vf/+\n/eXn56dPPvlEQ4cOVb9+/SRJgwcPlp+fn+rUqaPs7Gw1a9ZMR44cUc+ePbVt2za99957atSokSSZ\nY5Sdna3GjRs7jdHkyZNls9kUGhqqTZs26ffff1dhYaHatGmjESNGaPLkyTp16pRCQkK0Y8cOLVu2\nTF26dNE111yj2NhYXXXVVWZ///nPf8rHx0e5ubk6deqU3NzcFBwcrIyMDBUVFclut+vQoUMKCQlR\namqq6tevr6uuukqffPKJDMNQkyZNGKMKxig/P189evSo9e/b5/t6K++54sSwkJiYGKflIUOGmI87\nduxYbr3WrVsboaGhTv/CwsKM0NBQo3379k7tFhUVGU899ZQxb948wzAMo1OnToZhGMapU6eM2267\nzandO++804iJiTFWrVplrhswYID5ODY21nw8ePBgp7ol+3vmcQUGBhqGYRi7du0ypkyZYtx9993G\nhAkTjGXLlhl33HGHuV14eLhTvdjY2CqP0X333We0bdu23HFq3bq1ue25jFFMTIzx3//+t9xxquoY\n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\na/78+eb7tmEYysjI0Isvvqh9+/bpyy+/lPT/37dPnTqlnJwc3X333brzzjv1xBNP6N5779Wvv/6q\ntWvXmq83Pz8/9ejRw3zfNgzD3Gdxf6XT/6OSkJCg+vXra/jw4Zo/f74yMzPVuHFjPfzww/r3v/+t\n3bt3q3Hjxpo1a5YCAgL0yiuv6I477jirH7ay1A1me/bs0c6dO3XFFVfo0Ucf1bBhw1RUVKSCggLl\n5+crKCjI6TrBggULFBgYqLlz56pTp05miBqGoYULF2rEiBG6/PLL9fXXX6tr165atWpVqfKbbrpJ\nnTp10scff1yq7P3331enTp3M/YWHh2v+/PnmtkFBQWYdm82m3377zaz7+eefq1OnTurbt69Zf+HC\nhfL391eDBg3MNs7c55YtWxQTEyNJysjI0N133619+/bpgQce0K+//ipJuu2228x9pqWlacGCBRox\nYoQWLlyoJUuWSJJSU1P1zDPP6Oqrr1ZaWprCw8P16quvmuFZXN64cWMdOnRIbdq00YIFC5zKiq+n\ntmnTxgyhkvUKCgp0+PBhPfvss2a7Bw4c0C+//KIrr7xSvXv3LrPd4n0uXbpUCxYs0KBBg5zKEhMT\n1a5dO6cffCmrvx988IFZtmfPHjVt2lSHDh3SZ5995rTPQYMGmfU6d+6sU6dOydPTU2vWrFFaWprG\njx+vv/3tb+Z15aysLN1zzz1mWd26dZWfn6+IiAh5enrK29vbLLvsssuUl5enfv36mT9Yc2Y9h8Oh\ndevWac2aNZo2bZp+++03ZWZmys3NTWFhYYqIiJDD4dC0adOUlpamcePGmXW/+eYbORwOLV682Knd\n999/X61atVL//v01adIks+6Z/W3btq1Ztnv3brVo0ULHjh3Tzp071bhxYy1YsEBpaWm69957zXrt\n27fXU089pYiICM2aNcucdfn5+cnDw0OBgYGKiIhQQUFBqbBOSUlRRESEjh8/boa1u7u7hg8fruHD\nh6tjx47q37+/Dh06ZL7RBQUFac2aNerSpYsiIiI0YsQIBQUFKTAwUD/88IMkafv27erfv79GjBjh\n9AZZHGjFfVq6dKlTuSR16NBB06dPL1VXksaMGePU7ieffKLDhw+rYcOGcnNzM9s9s+7MmTO1YcMG\nZWVlyW63a/To0Xr66adVWFioffv2ad26dfroo4+0bt06jRkzRlOnTlVWVpbq1q2ryMhIff/99xo2\nbJhZ5nA45OPjoxdeeEGFhYX6/fffdd9995nl+/btk6+vr3766SfNnDlTfn5+GjNmjPLy8vT7778r\nPDxckZGR+uCDD8yyqVOnasqUKfLx8VHDhg21detWJScny8/PTzNnzjT3+/XXXysqKkp9+vRxqlvc\np6ioKPn4+Oiyyy6Tt7e33NzctGvXLl1++eWqW7eu8vLy9Oeff5rX6ceMGWMea5cuXZSTk6M6derI\n29tbLVq0UG5urnJzc7V792598cUXev3117Vv3z5de+21Onr0qNq2batx48YpPz9fOTk5ioqKMstz\nc3N1ww03aNKkSXrjjTfM98eSdQsKCvToo49q//792rdvn1q0aCHDMDRq1CiNGzdOw4YN06xZs8zy\nw4cPa+7cuWrbtq28vLz03//+V7/99psOHDigFi1a6ODBg9qxY4cGDx7s1G7J/owbN05+fn5q3Lix\n9u/fr2HDhqlFixby8fFR8+bNFRAQYF7v37Ztm0aOHGn298zXULnO6mT5BTJgwABj//79xubNm43Q\n0FDjhx9+MAzDMBwOh3HjjTcakZGRxrx588x/PXr0MObNm2d06dKlVNktt9xiPu7Vq1e55RXVdUW7\nZZUVH2dl+wwNDTXHctCgQcaePXsMwzCMrKwsY8CAAU7XYM4sL74ec65lNdluyWtA1dlu//79DYfD\nYRjG6Wt7xeWHDx82OnToUO1lUVFRNbLPmmw3JibG2LRpkzFkyBBj7NixxqZNm4zCwkLDMIwql51P\nXSu2e++99xpZWVlGZmamERQUZPz444+GYRjGvn37jI4dOxoHDx40y4rfy4rLStYrWRYdHV2q3TPr\nlmz3zH2W15/idiuqe7b9Lavd8vrbqVMn87m1c+dOY8qUKYZhGMa6desqLIuJiTFiY2OrVPdia/fM\na+PlsdTM2svLS02aNFGTJk1kt9vVpk0bSVLjxo1144036uabb9ZPP/2ksWPHqmnTplq/fr0ee+wx\nDRs2TAsWLCizTFKF5VUtq6l2z2efmzZtMsey+I5MSfL395eHh4fTdZszy6taVpPtllSd7Zac9fn6\n+qpp06aSpAYNGpinxIvLrrzyymopO3nyZLXs88x6Z7Z7LnUrqmez2dSlSxe99dZbysjI0IoVKzRx\n4kTVrVtX+/btq1JZo0aNal27/v7+8vf3V7169dS6dWtJUtOmTeXm5ia73S673a569eqZ72XFZSXr\nlSxzd3eXzWYrt/zMds/cZ3n9KW63orpn29+y2i2vv4ZhmK+/a665Rj/99JOk05+sKCoqKrds3rx5\ncnd3r1Ldi63dMy+JlsdS16xHjRqldu3aaejQoea633//XUuWLNGhQ4c0e/Zs7dq1S88995w6duyo\nNWvWaMWKFea2FZVVVm61dquyz+DgYN18880yDEM7d+7UY489pj59+mjJkiXatGmTtm7dWm75iy++\nqJ49e55z2cXYbt++fTV//nyFhISooKBAR44cUceOHbVx40Zdfvnl+uabb6q17Pbbb5e3t3e177Mm\n2/3000/Nz6WWlJWVpeHDh5uXIM6lzOFwKCEhoda0+/TTT+umm25STk6ODhw4oCZNmqh79+767rvv\n9OmnnyoiIuKcy/bv36+ioiK1aNGiVrSblJSk9u3bq3379lq/fr3at2+vJ598UuPHj9eWLVvUtm3b\nMssMw5Cnp6f++OOPc657sbVrGIbi4+NLPcfOZKmwPn78uJKTk52u8+7YsUObN29WdHS005cBfPzx\nx1q3bp1eeumlUu1UVHY+dV3R7rnss+TMWpL5pQGffvqpwsLCSt25WrK8fv365k1T51J2MbZb/IUU\nqamp5k0kjRs3VkhIiAICAmqkTNJF1W7x50LLUtWy86lrxXbz8/P10UcfqWHDhurbt69Wrlyp9PR0\nNWvWTHfffbdWrVp1zmUDBw6UpFrT7oABA5SWlqZff/1VrVq10i233CLp9F3brVq1UnJycpllxbP3\nNWvWnHPdi63d1q1bO50NLI+lwhoAAJRmqc9ZAwCA0ghrAAAsjrAGAMDiCGsAACyOsAYAwOL+HxQZ\n0VR2bjwLAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['avg_training_score'].value_counts().sort_index().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OPf7LTN_HRsm"
   },
   "outputs": [],
   "source": [
    "# # Missing values - Previous Year rating is imputed with 0 which indicates freshers\n",
    "# values={\"previous_year_rating\":0,\"education\":\"Others\"}\n",
    "# train.fillna(value=values,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 109352,
     "status": "ok",
     "timestamp": 1552319401590,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "XlXICi_mHRpp",
    "outputId": "89c3e361-30f3-4d96-f84b-83b1a45de8e4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 14 columns.\n",
      " There are 2 columns that have missing values.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Values</th>\n",
       "      <th>% of Total Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>previous_year_rating</th>\n",
       "      <td>4124</td>\n",
       "      <td>7.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>education</th>\n",
       "      <td>2409</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Missing Values  % of Total Values\n",
       "previous_year_rating            4124               7.52\n",
       "education                       2409               4.40"
      ]
     },
     "execution_count": 24,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values_table(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110164,
     "status": "ok",
     "timestamp": 1552319402424,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "2z899qXmHRng",
    "outputId": "62516d63-0861-499e-9f1a-4f59ddd53dcc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f20d0c53eb8>"
      ]
     },
     "execution_count": 25,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAe8AAAFOCAYAAACvyZWGAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAHlNJREFUeJzt3X9QlPX+9/HXwrIiuQRLu5Yd9fRD\n0/G341GByCA5GjPZL1FxoGEOzsk7LS2OpUxHOcc6ah465gnrqKWWld5yT96exsDTkZwaV/rBdzzq\njFF5pgg7sFuYIHYA3fsPpy1uNWRlvfysz8eMM+xnP9fy/ryvHV97XdeyawsEAgEBAABjRFldAAAA\n6BrCGwAAwxDeAAAYhvAGAMAwhDcAAIYhvAEAMIzd6gIulM/XZHUJXZaYGKfGxhary4ho9PjSoM/h\nR4/Dz8Qeu93Oc45z5B1Gdnu01SVEPHp8adDn8KPH4RdJPSa8AQAwDOENAIBhCG8AAAxDeAMAYBjC\nGwAAwxDeAAAYhvAGAMAwhDcAAIYhvAEAMAzhDQCAYQhvAAAMQ3gDAGAYY75VDMDPq5mVH77HDtPj\nDly/MUyPDEQ2jrwBADAM4Q0AgGEIbwAADEN4AwBgGMIbAADDEN4AABiG8AYAwDCENwAAhiG8AQAw\nDOENAIBhCG8AAAxDeAMAYBjCGwAAw1zQt4rV1NTooYceUn5+vnJzc/XII4+osbFRknTs2DGNHDlS\nDz74oO666y4NHTpUkpSYmKjVq1erqalJhYWFampqUlxcnEpKSpSQkKC9e/fq2WefVXR0tG677TbN\nmTMnfKsEACCCdBreLS0tWrp0qZKTk4Njq1evDv68aNEiZWdnS5JuuOEGvfrqqx2237Rpk8aOHatZ\ns2Zp69atWrdunRYsWKCnnnpKL730knr37q3c3FxNmjRJN998c3etCwCAiNXpaXOHw6F169bJ4/Gc\ndd+RI0fU1NSk4cOHn3d7r9erzMxMSVJ6erq8Xq9qa2t19dVX67rrrlNUVJQmTJggr9d7EcsAAODK\n0emRt91ul91+7mmvvPKKcnNzg7f9fr8eeeQRNTQ0aObMmZoyZYr8fr9cLpckKSkpSQ0NDfL5fMEx\nSXK5XKqtrf3ZOhIT42S3R1/Qoi4nbrfT6hIiHj0+o8bqAkLAvuuIfoRfpPT4gq55n0tra6s+/vhj\nFRcXS5ISEhI0b948TZkyRU1NTcrOztb48eM7bBMIBEIutLGxJeRtreJ2O+XzNVldRkSjx2Zj3/2I\n53L4mdjj873YCPnd5h9++GGH0+W9evXS/fffr5iYGLlcLg0dOlRHjhyRx+ORz+eTJNXX18vj8cjj\n8cjv9we3/WEcAAB0LuTwPnDggAYNGhS8vW/fPi1btkzSmTe5HT58WDfccINSU1NVXl4uSdq1a5fS\n0tL0i1/8Qs3Nzfrqq6/U3t6uyspKpaamXuRSAAC4MnR62vzgwYNasWKF6urqZLfbVVFRob/+9a/y\n+Xzq169fcN6YMWO0fft2TZ8+XadOndJvf/tb9e7dW3l5eVqwYIFmzpyp+Ph4rVy5UpJUXFyswsJC\nSVJWVpZuuOGGMC0RAIDIYgtczIXoS8i06xSSmddXTEOPf1QzK9/qErps4PqNVpdw2eC5HH4m9rjb\nr3kDAABrEN4AABiG8AYAwDCENwAAhiG8AQAwDOENAIBhCG8AAAxDeAMAYBjCGwAAwxDeAAAYhvAG\nAMAwhDcAAIYhvAEAMAzhDQCAYQhvAAAMQ3gDAGAYwhsAAMMQ3gAAGIbwBgDAMIQ3AACGIbwBADAM\n4Q0AgGEIbwAADEN4AwBgGMIbAADDEN4AABiG8AYAwDCENwAAhiG8AQAwzAWFd01NjSZOnKjNmzdL\nkhYuXKi77rpLeXl5ysvL07vvvitJ2rFjh+6//35lZ2dr27ZtkqS2tjYVFhYqJydHubm5qq2tlSQd\nPnxYM2bM0IwZM7RkyZIwLA0AgMhk72xCS0uLli5dquTk5A7jjz32mNLT0zvMKy0tVVlZmWJiYjR1\n6lRlZmaqsrJS8fHxKikp0fvvv6+SkhKtWrVKTz/9tIqKijR8+HAVFhZqz549mjBhQvevEACACNPp\nkbfD4dC6devk8Xh+dt7+/fs1bNgwOZ1OxcbGavTo0aqurpbX61VmZqYkKSUlRdXV1WptbVVdXZ2G\nDx8uSUpPT5fX6+2G5QAAEPk6PfK22+2y28+etnnzZm3YsEFJSUn6/e9/L7/fL5fLFbzf5XLJ5/N1\nGI+KipLNZpPf71d8fHxwblJSknw+38/WkZgYJ7s9+oIXdrlwu51WlxDx6PEZNVYXEAL2XUf0I/wi\npcedhve53H333UpISNDgwYO1du1aPf/88xo1alSHOYFA4Jzbnmv8fHN/qrGxJZRSLeV2O+XzNVld\n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\n/Hnv3r3KzMzU/Pnz9etf/1pJSUkWVtY9eMNaN3nttdfOe199ff0lrCRyrV27Vm+++abi4+O1bds2\nFRQUaP369XI6nec8GkfXvfDCC9qwYYOOHj2q2bNna82aNRo0aJD8fr9mz56t22+/3eoSjVdaWqqE\nhARNmDAhOPbf//6XM3Td7JNPPgn+XFpaqldeeUV9+/aVz+fT3Llzddttt1lY3cUjvLvJxo0blZyc\nLI/Hc9Z97e3tFlQUeaKjo5WQkCBJmj59upKSklRQUKAXX3yRI5Zu4nA41KdPH/Xp00cej0eDBg2S\nJF1zzTXq0aOHxdVFhrfeektr1qzRJ598ooULF+r666/Xe++9p7lz51pdWkT56f8JV199tfr27StJ\ncrvdstvNjz7zV3CZKC0t1VNPPaUnn3xSDoejw31VVVUWVRVZRo8erQcffFDPPfecYmNjNXHiRPXo\n0UP5+fk6duyY1eVFhKSkJL300ksqKCjQli1bJEn/+c9/9PLLL+vaa6+1uLrI0KNHDz366KM6cuSI\n/vjHP2rUqFE6ffq01WVFnE8//VTz5s1TIBDQF198obffflt33nmnXn75ZTmdTqvLu2i827wbnTx5\nUj169FBUVMe3Ehw6dEhDhgyxqKrIUlVVpbFjx3Z4Vd3c3KydO3dq2rRpFlYWGb7//nvt3r1bWVlZ\nwbFDhw7pww8/VE5ODkffYbB9+3bt2bNHf/nLX6wuJaJ88MEHHW73799fvXv31t///ndlZGToqquu\nsqiy7kF4AwBgGN5tDgCAYQhvAAAMQ3gDAGAYwhsAAMMQ3gAAGOb/AevwivRJFuxYAAAAAElFTkSu\nQmCC\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['previous_year_rating'].value_counts().sort_index().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zV_wsekVFBZx"
   },
   "outputs": [],
   "source": [
    "# def preProcessData(df):\n",
    "# #   Imputing Missing Values\n",
    "#   values={\"previous_year_rating\":train['previous_year_rating'].mode(),\"education\":\"Others\"}\n",
    "#   df.fillna(value=values,inplace=True)\n",
    "  \n",
    "# # \n",
    "#   return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110155,
     "status": "ok",
     "timestamp": 1552319402434,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "2v3tOkoehZeq",
    "outputId": "198ad5a2-09aa-4ae7-ad54-0611a6d880e7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee_id               int64\n",
       "department               object\n",
       "region                   object\n",
       "education                object\n",
       "gender                   object\n",
       "recruitment_channel      object\n",
       "no_of_trainings           int64\n",
       "age                       int64\n",
       "previous_year_rating    float64\n",
       "length_of_service         int64\n",
       "KPIs_met >80%             int64\n",
       "awards_won?               int64\n",
       "avg_training_score        int64\n",
       "is_promoted               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hSB3FuqPhaYJ"
   },
   "outputs": [],
   "source": [
    "# finalData_test['Geo_Field'] = le.fit_transform(finalData_test['Geo_Field'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZT615hut0ztf"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "kG3s6H_ohaxl"
   },
   "outputs": [],
   "source": [
    "def preProcessData(df):\n",
    "#   Missing Values Treatment\n",
    "  values={\"previous_year_rating\":0,\"education\":\"Others\"}\n",
    "  df.fillna(value=values,inplace=True)\n",
    "#   Binning oF Age Variable\n",
    "  # Converting age variale into categorical variable using binning\n",
    "  cut_points = [30,40,50]\n",
    "  labels = [\"youth\",\"middle\",\"old\",\"very_old\"]\n",
    "  df[\"age_cat\"] = binning(df[\"age\"], cut_points, labels)\n",
    "#   Label Encoding of Categorical Variable\n",
    "  for i in df.columns:\n",
    "    if df[i].dtype == 'object' or pd.api.types.is_categorical_dtype(df[i]):\n",
    "      df[i] = le.fit_transform(df[i])\n",
    "  print(\"Pre-Processing completed\")\n",
    "  return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110162,
     "status": "ok",
     "timestamp": 1552319402465,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "tZcdLGIAhbC6",
    "outputId": "48aadd05-bb8c-46ef-b793-dd5f51bb00ac"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pre-Processing completed\n"
     ]
    }
   ],
   "source": [
    "train = preProcessData(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110141,
     "status": "ok",
     "timestamp": 1552319402467,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "7sKcbY2jhbYl",
    "outputId": "74e3df27-bc40-437b-f7e7-59b4b7089f9b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee_id               int64\n",
       "department                int64\n",
       "region                    int64\n",
       "education                 int64\n",
       "gender                    int64\n",
       "recruitment_channel       int64\n",
       "no_of_trainings           int64\n",
       "age                       int64\n",
       "previous_year_rating    float64\n",
       "length_of_service         int64\n",
       "KPIs_met >80%             int64\n",
       "awards_won?               int64\n",
       "avg_training_score        int64\n",
       "is_promoted               int64\n",
       "age_cat                   int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_mjROykxhbns"
   },
   "outputs": [],
   "source": [
    "def addNewFeatures(df):\n",
    "  df['total_training_score'] = df['no_of_trainings'] * df['avg_training_score']\n",
    "  df['score_per_year'] = df['total_training_score']/df['length_of_service']\n",
    "  df['work_fraction'] = df['length_of_service'] / df['age']\n",
    "  df['start_year'] = df['age'] - df['length_of_service']\n",
    "  return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Qz43eYaYhb94"
   },
   "outputs": [],
   "source": [
    "train = addNewFeatures(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110137,
     "status": "ok",
     "timestamp": 1552319402485,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "fX0Zk9pvhcfP",
    "outputId": "123d2ea8-53a0-4091-f2f6-0017d112233d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee_id               int64\n",
       "department                int64\n",
       "region                    int64\n",
       "education                 int64\n",
       "gender                    int64\n",
       "recruitment_channel       int64\n",
       "no_of_trainings           int64\n",
       "age                       int64\n",
       "previous_year_rating    float64\n",
       "length_of_service         int64\n",
       "KPIs_met >80%             int64\n",
       "awards_won?               int64\n",
       "avg_training_score        int64\n",
       "is_promoted               int64\n",
       "age_cat                   int64\n",
       "total_training_score      int64\n",
       "score_per_year          float64\n",
       "work_fraction           float64\n",
       "start_year                int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110149,
     "status": "ok",
     "timestamp": 1552319402517,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "fyHrmZ_8hcZn",
    "outputId": "2aa435be-6306-4c94-c9dc-f66359a9b537"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>is_promoted</th>\n",
       "      <th>age_cat</th>\n",
       "      <th>total_training_score</th>\n",
       "      <th>score_per_year</th>\n",
       "      <th>work_fraction</th>\n",
       "      <th>start_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>65438</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>6.125000</td>\n",
       "      <td>0.228571</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65141</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.133333</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7513</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>7.142857</td>\n",
       "      <td>0.205882</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2542</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.256410</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48945</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>73</td>\n",
       "      <td>36.500000</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id  department  region  education  gender  recruitment_channel  \\\n",
       "0        65438           7      31          2       0                    2   \n",
       "1        65141           4      14          0       1                    0   \n",
       "2         7513           7      10          0       1                    2   \n",
       "3         2542           7      15          0       1                    0   \n",
       "4        48945           8      18          0       1                    0   \n",
       "\n",
       "   no_of_trainings  age  previous_year_rating  length_of_service  \\\n",
       "0                1   35                   5.0                  8   \n",
       "1                1   30                   5.0                  4   \n",
       "2                1   34                   3.0                  7   \n",
       "3                2   39                   1.0                 10   \n",
       "4                1   45                   3.0                  2   \n",
       "\n",
       "   KPIs_met >80%  awards_won?  avg_training_score  is_promoted  age_cat  \\\n",
       "0              1            0                  49            0        0   \n",
       "1              0            0                  60            0        3   \n",
       "2              0            0                  50            0        0   \n",
       "3              0            0                  50            0        0   \n",
       "4              0            0                  73            0        1   \n",
       "\n",
       "   total_training_score  score_per_year  work_fraction  start_year  \n",
       "0                    49        6.125000       0.228571          27  \n",
       "1                    60       15.000000       0.133333          26  \n",
       "2                    50        7.142857       0.205882          27  \n",
       "3                   100       10.000000       0.256410          29  \n",
       "4                    73       36.500000       0.044444          43  "
      ]
     },
     "execution_count": 35,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 110795,
     "status": "ok",
     "timestamp": 1552319403182,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "8aXxv0-zhb45",
    "outputId": "bfd20836-72b6-4ba7-f39a-dda269124b05"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pre-Processing completed\n"
     ]
    }
   ],
   "source": [
    "test = preProcessData(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ByCuYTH3haUJ"
   },
   "outputs": [],
   "source": [
    "test = addNewFeatures(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "A8c_dMVghaQM"
   },
   "outputs": [],
   "source": [
    "X = train.drop(['employee_id','age','is_promoted'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GFKA97vrhaMT"
   },
   "outputs": [],
   "source": [
    "Y = np.array(train['is_promoted'].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zVXY00SBhaHk"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "fwDGuIi_8chd"
   },
   "source": [
    "Model 1 - XGB Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 136
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 11217,
     "status": "ok",
     "timestamp": 1552319490513,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "A_ak9vbMhZa0",
    "outputId": "97aecc57-5c65-4aab-d50f-e3a207b5c05a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n",
      "       max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n",
      "       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n",
      "       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
      "       silent=True, subsample=1)\n",
      "[0.38166047 0.40148699 0.42041312 0.41990291 0.38154613]  Mean =  0.4010019259467672\n"
     ]
    }
   ],
   "source": [
    "xgb_model_1 = xgbm.XGBClassifier()\n",
    "print(xgb_model_1)\n",
    "# Cross validation scores\n",
    "f1_scores = cross_val_score(xgb_model_1, X_train, Y_train, cv=5, scoring='f1')\n",
    "print(f1_scores,\" Mean = \",np.mean(f1_scores))\n",
    "\n",
    "# Training the models\n",
    "xgb_model_1.fit(X_train,Y_train)\n",
    "\n",
    "# Scoring on test set\n",
    "# test_data,score_xgb = score_on_test_set(xgb_model,\"test.csv\",\"submission_xgb.csv\")\n",
    "\n",
    "Y_test_preds = xgb_model_1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "LdBjS1DUhZXF"
   },
   "outputs": [],
   "source": [
    "cm = confusion_matrix(Y_test,Y_test_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 376
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1118,
     "status": "ok",
     "timestamp": 1552319500261,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "oVXoks4yhZBl",
    "outputId": "dd92245e-1d7c-49e4-e8a4-4832006376c7"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAcAQggoAhvx/o1k9cFzTjI0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotConfusionMatrix(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 602675,
     "status": "ok",
     "timestamp": 1552320104813,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "TVN8arcDO7bS",
    "outputId": "49fe9c87-3010-491a-b34b-6c3b2556668b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.\n",
      "[Parallel(n_jobs=2)]: Done   5 out of   5 | elapsed:  3.9min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'learning_rate': 0.001, 'max_depth': 10, 'n_estimators': 1000, 'reg_alpha': 0.4}\n",
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=1, gamma=0, learning_rate=0.001, max_delta_step=0,\n",
      "       max_depth=10, min_child_weight=1, missing=None, n_estimators=1000,\n",
      "       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,\n",
      "       reg_alpha=0.4, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
      "       silent=True, subsample=1)\n",
      "[0.4774044  0.41105769 0.47981546 0.46332945 0.40240964]  Mean =  0.4468033285105122\n"
     ]
    }
   ],
   "source": [
    "params = {\n",
    "     'learning_rate': [0.001],\n",
    "     'n_estimators': [1000],\n",
    "     'max_depth':[10],\n",
    "     'reg_alpha':[0.4]\n",
    "    }\n",
    "\n",
    "# Initializing the XGBoost Regressor\n",
    "xgb_model = xgbm.XGBClassifier()\n",
    "\n",
    "# Gridsearch initializaation\n",
    "gsearch = GridSearchCV(xgb_model, params,\n",
    "                    verbose=True,\n",
    "                    cv=5,\n",
    "                    n_jobs=2)\n",
    "\n",
    "gsearch.fit(X_train, Y_train)\n",
    "\n",
    "#Printing the best chosen params\n",
    "print(gsearch.best_params_)\n",
    "\n",
    "params = {'objective':'binary:logistic', 'booster':'gbtree'}\n",
    "\n",
    "# Updating the parameter as per grid search\n",
    "params.update(gsearch.best_params_)\n",
    "\n",
    "# Initializing the XGBoost Regressor\n",
    "xgb_model = xgbm.XGBClassifier(**params)\n",
    "print(xgb_model)\n",
    "\n",
    "# Cross validation scores\n",
    "f1_scores_1 = cross_val_score(xgb_model, X_train, Y_train, cv=5, scoring='f1',n_jobs=2)\n",
    "print(f1_scores_1,\" Mean = \",np.mean(f1_scores_1))\n",
    "\n",
    "# Fitting model on tuned parameters\n",
    "xgb_model.fit(X_train, Y_train)\n",
    "Y_test_preds_1 = xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yKnacYR5-syx"
   },
   "outputs": [],
   "source": [
    "cm_1 = confusion_matrix(Y_test,Y_test_preds_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 376
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1051,
     "status": "ok",
     "timestamp": 1552320152304,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "ic0ri84sDiFj",
    "outputId": "8abceff8-f4e0-40d9-997d-631588a9092e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVQAAAFnCAYAAAD5fLG2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3WlglOWht/H/LJmEJGSDZCBhFSoo\niCsCYhVpMAbEYlFBLbYIRQH1QNXKdkBFAS19bVEEpa5BBWU5RdlcKr7ooShuURSEsCaEbJCNLLOe\nD6kDaQgEcodk4Pp9yjzzzHPfQ8iVZ2Ow+P1+vwAA9WZt7AkAwNmCoAKAIQQVAAwhqABgCEEFAEMI\nKgAYQlBRZ36/X6+88opuvPFGpaSkKDk5WY8++qhKSkrqtd2HHnpI1157rTZu3HjKr01PT9eoUaPq\nNf6xJk2apO7du6uwsLDa8i1btqhLly5asWLFSbexZs0alZaWHve5v/zlL3rrrbeMzBVND0FFnc2d\nO1dr1qzRSy+9pPXr12vVqlVyu9265557VJ/bmVevXq20tDT98pe/POXX9ujRQy+99NJpj308LVu2\n1Pr166stW716tVq3bl2n18+bN6/WoD744IO6/fbb6z1HNE0EFXVSWFiotLQ0zZkzR06nU5IUHh6u\n6dOna/To0fL7/aqsrNT06dOVkpKi1NRUzZkzR16vV5LUv39/LVmyRLfccouuvvpqzZkzR5I0YsQI\n+Xw+jRo1Sp988on69++vLVu2BMb9+bHH49HUqVOVkpKiAQMG6L777lNpaak2b96sAQMGSNJpjX88\n11xzjd57773AY6/Xq40bN+qyyy4LLNu1a5duv/12paamasCAAYH1J0+erN27d2vEiBHasmWLJk2a\npNmzZ2vw4MFau3atJk2apOeff17p6enq16+fjhw5IklauHChHnjggXp/n9C4CCrq5Ntvv1WrVq3U\nqVOnastDQ0PVv39/Wa1Wvfbaazp48KBWr16tlStXasuWLdXC9MUXX2jp0qVavny5Fi9erIMHDyot\nLU2SlJaWpmuvvbbW8T/99FNlZmZq3bp1ev/999W5c2d9/fXX1dY5nfGP5+KLL1ZWVpZycnIkSZs2\nbVKPHj3kcDgC6zz99NO67rrrtHbtWs2aNUtTp06V2+3W7NmzA+/niiuuCLx+2bJlSk1NDby+R48e\n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\nV1xYUW2duwYXatxthyRJpWVWjZyepFYtPbo9taheY/t80qMLnGoZ4wksKy2zasLTiXpu8gFd0qVC\nLy6P1eqNUbp7yGHNeTleHZNcWjD1gErLrBr6YDt171Spqy4pq9c8gkWD/qT89NNPSk5O1uLFixty\nmCbv8MXnK3JXpkIOFxvdbk6/K1R0YacayyMz9qu4S0f5bTbJZlNxl/ZqvnO/JKl5xn4VdussSfJE\nhqs8MUERew7I4vWq+Y59OnT5hZLFIndslDKHXEdMg1BkuE9D+hfrs2+O/wv+VLy1Llpdz6tUu9bu\nwLIPN0eoW6cKXdKlKupjhh7W3UOq9kJ/2huqPj3KAvPo3rlCP+1z1NzwWarB9lDLyso0c+ZM9enT\np6GGCBo+R4gKruim+P/9RgcGXXPCddus/Ej28spqy7yhDu0fmlxj3YpWLWUvPlJjuaOwREXdjobW\nHRUpx9YMWSsqZat0yR0VWf25w8UKKSyRz25T1Pbditq2R/4Qu/J7XaSytq1O9e2iCfB4LXKE+Gss\nn/NyS23YEllj+cJpWeqQ6K62LO+wTa+/G6t3/rxP42cfPRLavidUsVFejZ+VqJ37HbrwvAr99z25\niovyqU+PMq39rLn6XFymgkKb0n8K0x9+c8j8G2yiGiyoDodDixYt0qJFixpqiCalzf98XO0cannr\neOVc1zPwuPiCjor5fofC92WrrF3rWreTefOv6j0Xi8dTtXf6b367TRa3V1a3V36LRbId3ev02W0K\nqaiQ1eWWzeWS32bT3ttTFb4vW63X/692/3aQfGGh9Z4TzpyCQpuWfxitsbcV1Hhu0t35mnR3fp22\nM+vv8Ro/rEBRkb5qy4tLbfr06wi9MXu/EuPdmvacU7P+nqC5fzyo+28v0B2T26rXbzupvMKqu4cc\nVteOLiPvKxg0WFDtdrvs9nPnFO2JzqFKkiwW5fW9VAn//0vtbeNs0Ln47XZZvN6jQ3u88oXY5Qux\nyeL3S16vfr5aYfV4qp5zhEg+f+B0QFm71vJEhqtZToGOtK95nhZNy+vvxmjVhihJUrNQn24dUKTU\nvqWnvb2NX4WrsMSmm/qV1HiueYRXfS4uU/t/nwa4a3ChRj+WJEmaPM+plKtKNH7YIRWVWjX6sTZa\n82mkBl59+nMJJudO8ZqA8qQEuWKjFLM1o9Z1TuWQvzau2CiFFJVK/75A7ygskSsuSr6wUHmahcpR\ndESuuKofvpCiUpW1bRX4ZWB1u+WzVe2R+q2Wqj1aNHnHXpQ6kboe8n/wr0j9sCtMfX93niSpqNSm\n++ckasqoXCXGe7TnwNHzojarP3DQ89k3EXrod/myWKSY5j71veSIvvg+nKCiYeT3uVhtV34ki893\n3OdNHPKXdG6ruC9/UHGXDpL8iv5hl/J7XyRJKu3UVjHp25Xbr6cch4oUfiBXuddcLl+oQ2XtWin2\nm+0q6N1DYTkFCik5ooqEuHrPB01HXQ/5Hx+Xq8fHHb27YMTUNrpveIF6XVSuA3l2/e3NFtq+x6Eu\nHVxauj5GfS6uuhDVMcmlj7+I0MhfF6qi0qLN6eG66TqzF2ObMoJ6hrmjI1XcpYPivt5Wr+2E5h1S\n6w/+Jfl8svj96vDmGknSnjsGqrRTW4XlHlb7t9dLkkp+0V5HOlQdkuX37iHnR5vVYfFq+e1WHbzu\nSnnDwyRJB6+7Uq0+2qyOae/K5whR9oCrOH+KGhLjPZr9QI7um50oi0X6RTuXZo7PkSTN+a+Dmvli\ngpasi5HfL/3ysiO67fr63boVTCx+v7/mpUADvv/+ez311FPKysqS3W6X0+nUs88+q5iYmONP5G/T\nG2IaOIf5U2Y29hRwNupaezIbbA+1e/fuSktLa6jNA0CTw13bAGAIQQUAQwgqABhCUAHAEIIKAIYQ\nVAAwhKACgCEEFQAMIagAYAhBBQBDCCoAGEJQAcAQggoAhhBUADCEoAKAIQQVAAwhqABgCEEFAEMI\nKgAYQlABwBCCCgCGEFQAMISgAoAhBBUADCGoAGAIQQUAQwgqABhCUAHAEIIKAIYQVAAwhKACgCEE\nFQAMIagAYAhBBQBDCCoAGEJQAcAQggoAhhBUADCEoAKAIQQVAAwhqABgCEEFAEMIKgAYQlABwBCC\nCgCGEFQAMISgAoAhBBUADCGoAGAIQQUAQwgqABhCUAHAEIIKAIYQVAAwhKACgCEEFQAMIagAYAhB\nBQBDCCoAGEJQAcAQggoAhhBUADCEoAKAIQQVAAwhqABgCEEFAEMIKgAYQlABwBCCCgCGEFQAMMTi\n9/v9jT0JADgbsIcKAIYQVAAwhKACgCEEFQAMIagAYAhBBQBDCGoQmTVrloYNG6bhw4crPT29saeD\ns8RPP/2k5ORkLV68uLGnEvTsjT0B1M3nn3+uvXv3aunSpcrIyNCUKVO0dOnSxp4WglxZWZlmzpyp\nPn36NPZUzgrsoQaJTZs2KTk5WZLUqVMnFRUVqbS0tJFnhWDncDi0aNEiJSQkNPZUzgoENUjk5+cr\nNjY28DguLk55eXmNOCOcDex2u8LCwhp7GmcNghqk+BfDQNNDUINEQkKC8vPzA49zc3MVHx/fiDMC\n8J8IapDo27ev1q9fL0naunWrEhISFBkZ2cizAnAsPm0qiMydO1dbtmyRxWLRjBkz1LVr18aeEoLc\n999/r6eeekpZWVmy2+1yOp169tlnFRMT09hTC0oEFQAM4ZAfAAwhqABgCEEFAEMIKgAYQlABwBCC\nikaXmZmp7t27a8SIERoxYoSGDx+uBx98UMXFxae1vXfeeUeTJk2SJE2cOFE5OTm1rvvVV19p//79\ndd62x+NRly5dTmteOPsRVDQJcXFxSktLU1pampYsWaKEhAQtWLCg3tt95pln5HQ6a31+xYoVpxRU\n4ET4+D40ST179tTSpUvVv39/paamav/+/Zo3b57WrFmjxYsXy+/3Ky4uTk888YRiY2P1xhtv6K23\n3lKrVq2qfXJS//799corr6ht27Z64okn9P3330uSRo4cKbvdrnXr1ik9PV2TJ09W+/bt9dhjj6m8\nvFxlZWX64x//qKuuukq7du3Sww8/rGbNmqlXr16N9UeCIEBQ0eR4vV598MEHuvzyy7Vjxw516NBB\nDz/8sLKzs7Vw4UItW7ZMDodDr732ml544QWNHz9e8+bN07p16xQbG6uxY8cqOjq62jZXrVql/Px8\nvf322youLtZDDz2kBQsW6IILLtDYsWPVp08fjRkzRnfffbd69+6tvLw8DRs2TO+//77mz5+voUOH\n6o477tD777/fSH8qCAYEFU3CoUOHNGLECEmSz+fTFVdcod///vdasmSJLr30UknS119/rby8PI0a\nNUqS5HK51KZNG+3du1dJSUmBjzfs1auXtm3bVm376enpgb3LqKgovfjiizXmsHnzZh05ckTz58+X\nVPXRdgUFBfrpp580ZswYSVLv3r0b4N3jbEFQ0ST8fA71eEJCQiRVfRhyjx499MILL1R7/rvvvpPF\nYgk89vl8NbZhsViOu/xYDodDzz77rOLi4qot9/v9slqrLjd4vd6Tvxmcs7gohaBx0UUXKT09PfDB\n2mvXrtWHH36odu3aKTMzU8XFxfL7/dq0aVON11566aXauHGjJKm0tFS33nqrXC6XLBaL3G63JOny\nyy/X2rVrJVXtMT/55JOSqv6HhG+++UaSjrtt4GfsoSJoOJ1OTZ06Vffcc4+aNWumsLAwPfXUU4qO\njta9996rO++8U0lJSUpKSlJFRUW116ampuqrr77S8OHD5fV6NXLkSDkcDvXt21czZszQlClTNHXq\nVE2fPl2rV6+Wy+XS2LFjJUnIsAsQAAAARUlEQVTjx4/XI488onXr1unSSy+V3c6PDY6PT5sCAEM4\n5AcAQwgqABhCUAHAEIIKAIYQVAAwhKACgCEEFQAMIagAYMj/ATaqBoxnGcChAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotConfusionMatrix(cm_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 5631,
     "status": "ok",
     "timestamp": 1552320158974,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "hGmc55FiItrr",
    "outputId": "c47bfa96-be54-4b38-8083-24628c754fc4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.38166047 0.40148699 0.42041312 0.41990291 0.38154613]  Mean =  0.48899405934599666\n"
     ]
    }
   ],
   "source": [
    "# Initializing the LightGBM model\n",
    "lgbm_model = lgb.LGBMClassifier(objective='binary')\n",
    "\n",
    "# Cross validation score \n",
    "f1_scores_2 = cross_val_score(lgbm_model, X_train, Y_train, cv=5, scoring='f1',n_jobs=3)\n",
    "print(f1_scores,\" Mean = \",np.mean(f1_scores_2))\n",
    "\n",
    "# Fitting LightGBM model\n",
    "lgbm_model.fit(X_train, Y_train)\n",
    "#                , eval_set=[(X_test, Y_test)], eval_metric='auc', early_stopping_rounds=150)\n",
    "\n",
    "Y_test_preds_2 = lgbm_model.predict(X_test,num_iteration=lgbm_model.best_iteration_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tSIkbfESIv_L"
   },
   "outputs": [],
   "source": [
    "cm_2 = confusion_matrix(Y_test,Y_test_preds_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 376
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1088,
     "status": "ok",
     "timestamp": 1552320164256,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "AVOvp3b_JDjQ",
    "outputId": "d0d97be5-c338-4030-a481-d50e0465ee32"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVQAAAFnCAYAAAD5fLG2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAH4NJREFUeJzt3Xl8VOWh//HvSSYJIUP2BUjYKYtS\nlE1AqlIMYkRad6P8sEWoAi4XCtYAXtCCgNZeLYhCKS+1QSUKWFE2rRULlheKqBEUwSCBBBKSQPZt\nMjO/P3IdmJsEAjwhDHzef+WcOXOeZ8jkk3POTAbL7Xa7BQA4Z37NPQEAuFgQVAAwhKACgCEEFQAM\nIagAYAhBBQBDCCoaze1265VXXtHNN9+sESNGKDExUU8++aRKSkrOab/Tpk3Tddddpy1btpzxfdPT\n0zVu3LhzGv9kKSkp6tWrlwoLC73W79ixQ927d9eaNWtOu4/169ertLS03tv+/Oc/68033zQyV1x4\nCCoa7bnnntP69eu1fPlybdq0SWvXrpXD4dCDDz6oc3k787p165SamqprrrnmjO/bu3dvLV++/KzH\nrk90dLQ2bdrktW7dunVq06ZNo+6/cOHCBoM6depU3XPPPec8R1yYCCoapbCwUKmpqVqwYIHi4uIk\nSS1bttSsWbM0fvx4ud1uVVVVadasWRoxYoSSkpK0YMECOZ1OSdKwYcO0cuVK3XHHHfrFL36hBQsW\nSJLGjBkjl8ulcePG6ZNPPtGwYcO0Y8cOz7g/LdfU1GjmzJkaMWKEhg8frocfflilpaXavn27hg8f\nLklnNX59rr32Wr3//vueZafTqS1btqhv376edfv379c999yjpKQkDR8+3LP99OnT9eOPP2rMmDHa\nsWOHUlJSNH/+fI0aNUobNmxQSkqKXnrpJaWnp2vo0KEqKyuTJC1ZskSPPvroOX+f0LwIKhrl66+/\nVuvWrdWlSxev9UFBQRo2bJj8/Pz02muvKScnR+vWrdM777yjHTt2eIXp888/V1pamlavXq0VK1Yo\nJydHqampkqTU1FRdd911DY6/detWZWVlaePGjfrggw/UtWtXffnll17bnM349bniiiuUnZ2t3Nxc\nSdK2bdvUu3dvBQYGerZ59tln9ctf/lIbNmzQvHnzNHPmTDkcDs2fP9/zePr37++5/6pVq5SUlOS5\n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\n/wGxJbncBJ4Z9gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotConfusionMatrix(cm_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 241
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 825,
     "status": "ok",
     "timestamp": 1552320166254,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "eIkn_2nDSMoH",
    "outputId": "62f112d4-48f3-4ded-a42e-3a9498e7433e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_id</th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>age</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>age_cat</th>\n",
       "      <th>total_training_score</th>\n",
       "      <th>score_per_year</th>\n",
       "      <th>work_fraction</th>\n",
       "      <th>start_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8724</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>0.041667</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>74430</td>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>0.161290</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72255</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>11.750000</td>\n",
       "      <td>0.129032</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38562</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>31</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>0</td>\n",
       "      <td>195</td>\n",
       "      <td>21.666667</td>\n",
       "      <td>0.290323</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>64486</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>3</td>\n",
       "      <td>61</td>\n",
       "      <td>8.714286</td>\n",
       "      <td>0.233333</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee_id  department  region  education  gender  recruitment_channel  \\\n",
       "0         8724           8      18          0       1                    2   \n",
       "1        74430           2      28          0       0                    0   \n",
       "2        72255           7       4          0       1                    0   \n",
       "3        38562           5      11          0       0                    0   \n",
       "4        64486           1      21          0       1                    2   \n",
       "\n",
       "   no_of_trainings  age  previous_year_rating  length_of_service  \\\n",
       "0                1   24                   0.0                  1   \n",
       "1                1   31                   3.0                  5   \n",
       "2                1   31                   1.0                  4   \n",
       "3                3   31                   2.0                  9   \n",
       "4                1   30                   4.0                  7   \n",
       "\n",
       "   KPIs_met >80%  awards_won?  avg_training_score  age_cat  \\\n",
       "0              1            0                  77        3   \n",
       "1              0            0                  51        0   \n",
       "2              0            0                  47        0   \n",
       "3              0            0                  65        0   \n",
       "4              0            0                  61        3   \n",
       "\n",
       "   total_training_score  score_per_year  work_fraction  start_year  \n",
       "0                    77       77.000000       0.041667          23  \n",
       "1                    51       10.200000       0.161290          26  \n",
       "2                    47       11.750000       0.129032          27  \n",
       "3                   195       21.666667       0.290323          22  \n",
       "4                    61        8.714286       0.233333          23  "
      ]
     },
     "execution_count": 53,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sIloHDVXSNCt"
   },
   "outputs": [],
   "source": [
    "testSet_X = test.drop(['employee_id','age'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-8LMqnHuSNU6"
   },
   "outputs": [],
   "source": [
    "testSetPreds_X_1 = xgb_model_1.predict(testSet_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IUBv45qvSNhr"
   },
   "outputs": [],
   "source": [
    "testSetPreds_X_2 = xgb_model.predict(testSet_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CsXVLUdvSN4Y"
   },
   "outputs": [],
   "source": [
    "testSetPreds_X_3 = lgbm_model.predict(testSet_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KJEuyBNDSMlj"
   },
   "outputs": [],
   "source": [
    "submission_df_1 = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_X_1})\n",
    "submission_df_1.to_csv(\"xgb_1.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y8PWRvCBSMjD"
   },
   "outputs": [],
   "source": [
    "submission_df_2 = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_X_2})\n",
    "submission_df_2.to_csv(\"xgb_2.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FQkxvrfBSMgu"
   },
   "outputs": [],
   "source": [
    "submission_df_3 = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_X_3})\n",
    "submission_df_3.to_csv(\"lgb.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "b9nZzn08SMeW"
   },
   "outputs": [],
   "source": [
    "from google.colab import files\n",
    "files.download(\"xgb_1.csv\")\n",
    "files.download(\"xgb_2.csv\")\n",
    "files.download(\"lgb.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 4385,
     "status": "ok",
     "timestamp": 1552320185343,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "A901BJW7YbIf",
    "outputId": "74bc7b5d-e595-4e8d-dc50-a88f5b8073eb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "####Accuracy: 0.919887211809587\n",
      "####Precision: 0.5706214689265536\n",
      "####Recall: 0.06852103120759837\n",
      "####F1 Score: 0.12235009085402784\n"
     ]
    }
   ],
   "source": [
    "#Logistic Regression\n",
    "from sklearn import linear_model\n",
    "lr = linear_model.LogisticRegression(C=1000,solver='liblinear')\n",
    "lr.fit(X_train,Y_train)\n",
    "prediction_lr = lr.predict(X_test)\n",
    "\n",
    "print('####Accuracy:', accuracy_score(Y_test, prediction_lr))\n",
    "print('####Precision:', precision_score(Y_test, prediction_lr))\n",
    "print('####Recall:', recall_score(Y_test, prediction_lr))\n",
    "print('####F1 Score:',f1_score(Y_test, prediction_lr, average='binary'))\n",
    "\n",
    "testSetPreds_lr = lr.predict(testSet_X)\n",
    "\n",
    "submission_lr = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_lr})\n",
    "submission_lr.to_csv(\"lr.csv\", index=False)\n",
    "\n",
    "# prediction = lr.predict(finalData_test)\n",
    "# pd.DataFrame({'Customer_ID': test_data['Customer_ID'], 'Store_Code': test_data['Store_Code'], 'Prediction' : prediction},columns=['Customer_ID', 'Store_Code','Prediction']).to_csv('lr.csv', index=False)\n",
    "# from google.colab import files\n",
    "# files.download('lr_1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 45739,
     "status": "ok",
     "timestamp": 1552320232633,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "P-OFTW9OYbU6",
    "outputId": "ff91c4e6-d648-4b03-98e1-63cc8ae6eaf9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "####Accuracy: 0.9346491955548184\n",
      "####Precision: 0.9219653179190751\n",
      "####Recall: 0.21641791044776118\n",
      "####F1 Score: 0.3505494505494506\n"
     ]
    }
   ],
   "source": [
    "#oob_score = TRUE, n_jobs = -1,random_state =50,max_features = \"auto\", min_samples_leaf\n",
    "#Random Forest\n",
    "from sklearn import ensemble\n",
    "rf = ensemble.RandomForestClassifier(n_estimators=1000,oob_score = True, n_jobs = -1,max_features = \"auto\", min_samples_leaf=10)\n",
    "rf.fit(X_train,Y_train)\n",
    "prediction_rf = rf.predict(X_test)\n",
    "\n",
    "print('####Accuracy:', accuracy_score(Y_test, prediction_rf))\n",
    "print('####Precision:', precision_score(Y_test, prediction_rf))\n",
    "print('####Recall:', recall_score(Y_test, prediction_rf))\n",
    "print('####F1 Score:',f1_score(Y_test, prediction_rf, average='binary'))\n",
    "\n",
    "testSetPreds_rf = lr.predict(testSet_X)\n",
    "\n",
    "submission_rf = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_rf})\n",
    "submission_rf.to_csv(\"rf.csv\", index=False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 8454,
     "status": "ok",
     "timestamp": 1552320248686,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "oFYvxrISYbhJ",
    "outputId": "8a9c4071-3114-4463-dba7-8d97d281232d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "####Accuracy: 0.9249737380438989\n",
      "####Precision: 0.693069306930693\n",
      "####Recall: 0.14246947082767977\n",
      "####F1 Score: 0.23635340461451881\n"
     ]
    }
   ],
   "source": [
    "#Predctng usng KNN\n",
    "from sklearn import neighbors\n",
    "KN = neighbors.KNeighborsClassifier()\n",
    "KN.fit(X_train,Y_train)\n",
    "predict_KN = KN.predict(X_test)\n",
    "\n",
    "print('####Accuracy:', accuracy_score(Y_test, predict_KN))\n",
    "print('####Precision:', precision_score(Y_test, predict_KN))\n",
    "print('####Recall:', recall_score(Y_test, predict_KN))\n",
    "print('####F1 Score:',f1_score(Y_test, predict_KN, average='binary'))\n",
    "\n",
    "\n",
    "testSetPreds_knn = lr.predict(testSet_X)\n",
    "\n",
    "submission_knn = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_knn})\n",
    "submission_knn.to_csv(\"knn.csv\", index=False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "k8WB7t9pYbtY"
   },
   "outputs": [],
   "source": [
    "from google.colab import files\n",
    "files.download(\"lr.csv\")\n",
    "files.download(\"rf.csv\")\n",
    "files.download(\"knn.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "w6mXNxmnYb38"
   },
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "sm = SMOTE(kind='regular')\n",
    "X_SMOTE, y_SMOTE = sm.fit_sample(X, Y)\n",
    "X_SMOTE = pd.DataFrame(X_SMOTE)\n",
    "X_SMOTE.columns = X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 241
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 2310,
     "status": "ok",
     "timestamp": 1552320969291,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "TBe2_8qXYcDt",
    "outputId": "31edb3a4-2954-49a5-b84c-e2eae892ae5d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>department</th>\n",
       "      <th>region</th>\n",
       "      <th>education</th>\n",
       "      <th>gender</th>\n",
       "      <th>recruitment_channel</th>\n",
       "      <th>no_of_trainings</th>\n",
       "      <th>previous_year_rating</th>\n",
       "      <th>length_of_service</th>\n",
       "      <th>KPIs_met &gt;80%</th>\n",
       "      <th>awards_won?</th>\n",
       "      <th>avg_training_score</th>\n",
       "      <th>age_cat</th>\n",
       "      <th>total_training_score</th>\n",
       "      <th>score_per_year</th>\n",
       "      <th>work_fraction</th>\n",
       "      <th>start_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>6.125000</td>\n",
       "      <td>0.228571</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.133333</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>7.142857</td>\n",
       "      <td>0.205882</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.256410</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>36.500000</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   department  region  education  gender  recruitment_channel  \\\n",
       "0         7.0    31.0        2.0     0.0                  2.0   \n",
       "1         4.0    14.0        0.0     1.0                  0.0   \n",
       "2         7.0    10.0        0.0     1.0                  2.0   \n",
       "3         7.0    15.0        0.0     1.0                  0.0   \n",
       "4         8.0    18.0        0.0     1.0                  0.0   \n",
       "\n",
       "   no_of_trainings  previous_year_rating  length_of_service  KPIs_met >80%  \\\n",
       "0              1.0                   5.0                8.0            1.0   \n",
       "1              1.0                   5.0                4.0            0.0   \n",
       "2              1.0                   3.0                7.0            0.0   \n",
       "3              2.0                   1.0               10.0            0.0   \n",
       "4              1.0                   3.0                2.0            0.0   \n",
       "\n",
       "   awards_won?  avg_training_score  age_cat  total_training_score  \\\n",
       "0          0.0                49.0      0.0                  49.0   \n",
       "1          0.0                60.0      3.0                  60.0   \n",
       "2          0.0                50.0      0.0                  50.0   \n",
       "3          0.0                50.0      0.0                 100.0   \n",
       "4          0.0                73.0      1.0                  73.0   \n",
       "\n",
       "   score_per_year  work_fraction  start_year  \n",
       "0        6.125000       0.228571        27.0  \n",
       "1       15.000000       0.133333        26.0  \n",
       "2        7.142857       0.205882        27.0  \n",
       "3       10.000000       0.256410        29.0  \n",
       "4       36.500000       0.044444        43.0  "
      ]
     },
     "execution_count": 63,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_SMOTE.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "t8TKHm97iuCK"
   },
   "outputs": [],
   "source": [
    "X_train_SM, X_test_SM, Y_train_SM, Y_test_SM = train_test_split(X_SMOTE, y_SMOTE, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 12104,
     "status": "ok",
     "timestamp": 1552322363514,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "6DLbEz52YcR-",
    "outputId": "345c9cc5-5eff-43d5-94bb-61b1b0399037"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.38166047 0.40148699 0.42041312 0.41990291 0.38154613]  Mean =  0.9612476058847754\n"
     ]
    }
   ],
   "source": [
    "# Initializing the LightGBM model\n",
    "lgbm_model_smote = lgb.LGBMClassifier(objective='binary')\n",
    "\n",
    "# Cross validation score \n",
    "f1_scores_2 = cross_val_score(lgbm_model_smote, X_train_SM, Y_train_SM, cv=5, scoring='f1',n_jobs=3)\n",
    "print(f1_scores,\" Mean = \",np.mean(f1_scores_2))\n",
    "\n",
    "# Fitting LightGBM model\n",
    "lgbm_model_smote.fit(X_train_SM, Y_train_SM)\n",
    "#                , eval_set=[(X_test, Y_test)], eval_metric='auc', early_stopping_rounds=150)\n",
    "\n",
    "Y_test_preds_SMOTE = lgbm_model_smote.predict(X_test_SM,num_iteration=lgbm_model_smote.best_iteration_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7v3KDD41jsRi"
   },
   "outputs": [],
   "source": [
    "cm_smote = confusion_matrix(Y_test_SM,Y_test_preds_SMOTE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 376
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1394,
     "status": "ok",
     "timestamp": 1552322267069,
     "user": {
      "displayName": "Sateesh Yavarn",
      "photoUrl": "",
      "userId": "17604088172453883171"
     },
     "user_tz": -330
    },
    "id": "-ebMjmDFjtEJ",
    "outputId": "4047bde6-a11a-499b-d550-ba1935087b47"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotConfusionMatrix(cm_smote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Gof4xdZennFr"
   },
   "outputs": [],
   "source": [
    "testSetPreds_smote = lgbm_model_smote.predict(testSet_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BUeIUnyKjV2u"
   },
   "outputs": [],
   "source": [
    "submission_lgbm_smote_1 = pd.DataFrame({'employee_id':test['employee_id'],'is_promoted':testSetPreds_smote})\n",
    "submission_lgbm_smote_1.to_csv(\"submission_lgbm_smote_1.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zpcEQsJ4oHKE"
   },
   "outputs": [],
   "source": [
    "from google.colab import files\n",
    "files.download(\"submission_lgbm_smote_1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "5kUIZ1WFTHHJ"
   },
   "outputs": [],
   "source": [
    "# # # Detecting Outliers\n",
    "\n",
    "# Q1 = finalData['Revenue'].quantile(0.25)\n",
    "# Q3 = finalData['Revenue'].quantile(0.75)\n",
    "# IQR = Q3 - Q1\n",
    "# # print(IQR)\n",
    "# # print(finalData[(finalData['Revenue'] < (Q1 - 1.5 * IQR)) | (finalData['Revenue'] > (Q3 + 1.5 * IQR)) == True])\n",
    "\n",
    "# finalData['Revenue'] = finalData['Revenue'][~((finalData['Revenue'] < (Q1 - 1.5 * IQR)) |(finalData['Revenue'] > (Q3 + 1.5 * IQR)))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "pYhp1nuuTHOG"
   },
   "outputs": [],
   "source": [
    "# # https://stackoverflow.com/questions/38420847/apply-standardscaler-on-a-partial-part-of-a-data-set\n",
    "# from sklearn import preprocessing\n",
    "# scaled_features = finalData.copy()\n",
    "# col_names = ['Revenue', 'Discount','','']\n",
    "# features = scaled_features[col_names]\n",
    "# scaler = StandardScaler().fit(features.values)\n",
    "# features = scaler.transform(features.values)\n",
    "# scaled_features[col_names] = features"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "HR Analytics",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
